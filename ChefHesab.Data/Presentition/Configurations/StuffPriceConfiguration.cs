// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>

using ChefHesab.Domain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using System;
using System.Collections.Generic;

namespace ChefHesab.Data.Configurations
{

    public class StuffPriceConfiguration : IEntityTypeConfiguration<StuffPrice>
    {
        public void Configure(EntityTypeBuilder<StuffPrice> builder)
        {
            builder.ToTable("StuffPrice", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_StuffPrice").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedOnAdd();
            builder.Property(x => x.FoodStuffId).HasColumnName(@"FoodStuffId").HasColumnType("uniqueidentifier").IsRequired();
            builder.Property(x => x.Price).HasColumnName(@"Price").HasColumnType("bigint").IsRequired();
            builder.Property(x => x.AmountPercent).HasColumnName(@"AmountPercent").HasColumnType("decimal(2,2)").HasPrecision(2, 2).IsRequired(false);
            builder.Property(x => x.TotalPrice).HasColumnName(@"TotalPrice").HasColumnType("bigint").IsRequired();
            builder.Property(x => x.InsertDate).HasColumnName(@"InsertDate").HasColumnType("date").IsRequired();
            builder.Property(x => x.Active).HasColumnName(@"Active").HasColumnType("bit").IsRequired();
            builder.Property(x => x.PersonalId).HasColumnName(@"PersonalId").HasColumnType("uniqueidentifier").IsRequired(false);
            builder.Property(x => x.CompanyId).HasColumnName(@"CompanyId").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.ContractingCompany).WithMany(b => b.StuffPrices).HasForeignKey(c => c.CompanyId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_StuffPrice_ContractingCompanies");
            builder.HasOne(a => a.FoodStuff).WithMany(b => b.StuffPrices).HasForeignKey(c => c.FoodStuffId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_StuffPrice_FoodStuff");
            builder.HasOne(a => a.Personal).WithMany(b => b.StuffPrices).HasForeignKey(c => c.PersonalId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_StuffPrice_Personal");
        }
    }


}
