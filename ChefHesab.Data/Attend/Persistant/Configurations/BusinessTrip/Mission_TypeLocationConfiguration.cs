// <auto-generated>
// ReSharper disable All

using Ksc.HR.Domain.Entities.BusinessTrip;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace Ksc.HR.Data.Persistant.Configurations.BusinessTrip
{
    // TypeLocation
    public class Mission_TypeLocationConfiguration : IEntityTypeConfiguration<Mission_TypeLocation>
    {
        public void Configure(EntityTypeBuilder<Mission_TypeLocation> builder)
        {
            builder.ToTable("TypeLocation", "Mission");
            builder.HasKey(x => x.Id).HasName("PK_TypeLocation").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.MissionTypeId).HasColumnName(@"MissionTypeId").HasColumnType("int").IsRequired();
            builder.Property(x => x.MissionLocationId).HasColumnName(@"MissionLocationId").HasColumnType("int").IsRequired();
            builder.Property(x => x.MissionMinimumDayForChecked).HasColumnName(@"MissionMinimumDayForChecked").HasColumnType("int").IsRequired();
            builder.Property(x => x.MissionMaximumDay).HasColumnName(@"MissionMaximumDay").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CheckMissionDaysInMonth).HasColumnName(@"CheckMissionDaysInMonth").HasColumnType("bit").IsRequired();
            builder.Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType("bit").IsRequired();
            builder.Property(x => x.InsertDate).HasColumnName(@"InsertDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.InsertUser).HasColumnName(@"InsertUser").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.UpdateDate).HasColumnName(@"UpdateDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.UpdateUser).HasColumnName(@"UpdateUser").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            // Foreign keys
            builder.HasOne(a => a.Mission_Location).WithMany(b => b.Mission_TypeLocations).HasForeignKey(c => c.MissionLocationId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_TypeLocation_Location");
            builder.HasOne(a => a.Mission_Type).WithMany(b => b.Mission_TypeLocations).HasForeignKey(c => c.MissionTypeId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_TypeLocation_Type");
        }
    }

}
// </auto-generated>
