// <auto-generated>
// ReSharper disable All

using Ksc.HR.Domain.Entities.ScheduledLoger;
using Ksc.HR.Domain.Entities.StandBy;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace Ksc.HR.Data.Persistant.Configurations
{
    // StandbyHeader
    public class StandbyReplacementRequestsConfiguration : IEntityTypeConfiguration<StandbyReplacementRequests>
    {
        public void Configure(EntityTypeBuilder<StandbyReplacementRequests> builder)
        {
            builder.ToTable("StandbyReplacementRequests", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_StandbyReplacementRequests").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.SourceStandbyEmployeeBoardId).HasColumnName(@"SourceStandbyEmployeeBoardId").HasColumnType("int").IsRequired();
            builder.Property(x => x.DestinationStandbyEmployeeBoardId).HasColumnName(@"DestinationStandbyEmployeeBoardId").HasColumnType("int").IsRequired();
            builder.Property(x => x.WfRequestId).HasColumnName(@"WFRequestId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Status).HasColumnName(@"Status").HasColumnType("tinyint").IsRequired();
            builder.Property(x => x.RequestDate).HasColumnName(@"RequestDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.DestinationStandbyEmployeeBoard).WithMany(b => b.StandbyReplacementRequests_DestinationStandbyEmployeeBoardId).HasForeignKey(c => c.DestinationStandbyEmployeeBoardId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_StandbyReplacementRequests_StandbyEmloyeeBoard1");
            builder.HasOne(a => a.SourceStandbyEmployeeBoard).WithMany(b => b.StandbyReplacementRequests_SourceStandbyEmployeeBoardId).HasForeignKey(c => c.SourceStandbyEmployeeBoardId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_StandbyReplacementRequests_StandbyEmloyeeBoard");
            builder.HasOne(a => a.WF_Request).WithMany(b => b.StandbyReplacementRequests).HasForeignKey(c => c.WfRequestId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_StandbyReplacementRequests_Request");
        }
    }
}
// </auto-generated>







