// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Ksc.HR.Domain.Entities.Workshift;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using System;
using System.Collections.Generic;

namespace Ksc.HR.Data.Persistant.Configurations
{
    public class TimeShiftSettingConfiguration : IEntityTypeConfiguration<TimeShiftSetting>
    {
        public void Configure(EntityTypeBuilder<TimeShiftSetting> builder)
        {
            builder.ToTable("TimeShiftSetting", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_TimeShiftSetting").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.WorkCompanySettingId).HasColumnName(@"WorkCompanySettingId").HasColumnType("int").IsRequired();
            builder.Property(x => x.ValidityStartDate).HasColumnName(@"ValidityStartDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.ValidityEndDate).HasColumnName(@"ValidityEndDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.ShiftStartTime).HasColumnName(@"ShiftStartTime").HasColumnType("char(5)").IsRequired(false).IsFixedLength().IsUnicode(false).HasMaxLength(5);
            builder.Property(x => x.ShiftEndtTime).HasColumnName(@"ShiftEndtTime").HasColumnType("char(5)").IsRequired(false).IsFixedLength().IsUnicode(false).HasMaxLength(5);
            builder.Property(x => x.DurationTimeBeforeShiftStartTime).HasColumnName(@"DurationTimeBeforeShiftStartTime").HasColumnType("char(5)").IsRequired(false).IsFixedLength().IsUnicode(false).HasMaxLength(5);
            builder.Property(x => x.DurationTimeAfterShiftEndTime).HasColumnName(@"DurationTimeAfterShiftEndTime").HasColumnType("char(5)").IsRequired(false).IsFixedLength().IsUnicode(false).HasMaxLength(5);
            builder.Property(x => x.ToleranceShiftStartTime).HasColumnName(@"ToleranceShiftStartTime").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ToleranceShiftEndTime).HasColumnName(@"ToleranceShiftEndTime").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PercentageWorkTime).HasColumnName(@"PercentageWorkTime").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.TotalWorkHourInDay).HasColumnName(@"TotalWorkHourInDay").HasColumnType("char(5)").IsRequired(false).IsFixedLength().IsUnicode(false).HasMaxLength(5);
            builder.Property(x => x.TotalWorkHourInWeek).HasColumnName(@"TotalWorkHourInWeek").HasColumnType("char(6)").IsRequired(false).IsFixedLength().IsUnicode(false).HasMaxLength(6);
            builder.Property(x => x.TotalWorkHourInMonth).HasColumnName(@"TotalWorkHourInMonth").HasColumnType("char(6)").IsRequired(false).IsFixedLength().IsUnicode(false).HasMaxLength(6);
            builder.Property(x => x.TotalWorkHourInYear).HasColumnName(@"TotalWorkHourInYear").HasColumnType("char(7)").IsRequired(false).IsFixedLength().IsUnicode(false).HasMaxLength(7);
            builder.Property(x => x.IsTemporaryTime).HasColumnName(@"IsTemporaryTime").HasColumnType("bit").IsRequired();
            builder.Property(x => x.TemporaryRollCallDefinitionStartShift).HasColumnName(@"TemporaryRollCallDefinitionStartShift").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.TemporaryRollCallDefinitionEndShift).HasColumnName(@"TemporaryRollCallDefinitionEndShift").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ForcedOverTime).HasColumnName(@"ForcedOverTime").HasColumnType("char(5)").IsRequired(false).IsFixedLength().IsUnicode(false).HasMaxLength(5);
            builder.Property(x => x.MinimumWorkHourInDay).HasColumnName(@"MinimumWorkHourInDay").HasColumnType("char(5)").IsRequired(false).IsFixedLength().IsUnicode(false).HasMaxLength(5);
            builder.Property(x => x.InsertDate).HasColumnName(@"InsertDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.InsertUser).HasColumnName(@"InsertUser").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.UpdateDate).HasColumnName(@"UpdateDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.UpdateUser).HasColumnName(@"UpdateUser").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.DomainName).HasColumnName(@"DomainName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType("bit").IsRequired();
            builder.Property(x => x.RowVersion).HasColumnName(@"RowVersion").HasColumnType("timestamp(8)").IsRequired().IsFixedLength().HasMaxLength(8).IsRowVersion().IsConcurrencyToken();
            builder.Property(x => x.TemprorayOverTimeRollCallDefinitionStartShift).HasColumnName(@"TemprorayOverTimeRollCallDefinitionStartShift").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.TemprorayOverTimeRollCallDefinitionEndShift).HasColumnName(@"TemprorayOverTimeRollCallDefinitionEndShift").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.BreastfeddingToleranceTime).HasColumnName(@"BreastfeddingToleranceTime").HasColumnType("char(5)").IsRequired(false).IsFixedLength().IsUnicode(false).HasMaxLength(5);
            builder.Property(x => x.TemprorayOverTimeDuration).HasColumnName(@"TemprorayOverTimeDuration").HasColumnType("char(5)").IsRequired(false).IsFixedLength().IsUnicode(false).HasMaxLength(5);
            builder.Property(x => x.TemprorayOverTimeDurationInStartShift).HasColumnName(@"TemprorayOverTimeDurationInStartShift").HasColumnType("char(5)").IsRequired(false).IsFixedLength().IsUnicode(false).HasMaxLength(5);
            builder.Property(x => x.CheckedEmployeeValidOverTime).HasColumnName(@"CheckedEmployeeValidOverTime").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.ConditionalAbsenceToleranceTime).HasColumnName(@"ConditionalAbsenceToleranceTime").HasColumnType("char(5)").IsRequired(false).IsFixedLength().IsUnicode(false).HasMaxLength(5);
            builder.Property(x => x.ValidOverTimeStartTime).HasColumnName(@"ValidOverTimeStartTime").HasColumnType("char(5)").IsRequired(false).IsFixedLength().IsUnicode(false).HasMaxLength(5);

            // Foreign keys
            builder.HasOne(a => a.RollCallDefinition_OverTimeRollCallDefinitionEndShift).WithMany(b => b.TimeShiftSettings_OverTimeRollCallDefinitionEndShift).HasForeignKey(c => c.TemprorayOverTimeRollCallDefinitionEndShift).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_TimeShiftSetting_RollCallDefinition3");
            builder.HasOne(a => a.RollCallDefinition_OverTimeRollCallDefinitionStartShift).WithMany(b => b.TimeShiftSettings_OverTimeRollCallDefinitionStartShift).HasForeignKey(c => c.TemprorayOverTimeRollCallDefinitionStartShift).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_TimeShiftSetting_RollCallDefinition2");
            builder.HasOne(a => a.RollCallDefinition_TemporaryRollCallDefinitionEndShift).WithMany(b => b.TimeShiftSettings_TemporaryRollCallDefinitionEndShift).HasForeignKey(c => c.TemporaryRollCallDefinitionEndShift).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_TimeShiftSetting_RollCallDefinition1");
            builder.HasOne(a => a.RollCallDefinition_TemporaryRollCallDefinitionStartShift).WithMany(b => b.TimeShiftSettings_TemporaryRollCallDefinitionStartShift).HasForeignKey(c => c.TemporaryRollCallDefinitionStartShift).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_TimeShiftSetting_RollCallDefinition");
            builder.HasOne(a => a.WorkCompanySetting).WithMany(b => b.TimeShiftSettings).HasForeignKey(c => c.WorkCompanySettingId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_TimeShiftSetting_WorkCompanySetting");
        }
    }
}
