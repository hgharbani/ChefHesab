// <auto-generated>
// ReSharper disable All

using Ksc.HR.Domain.Entities.Workshift;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace Ksc.HR.Data.Persistant.Configurations
{
    // TimeSheetSetting
    public class TimeSheetSettingConfiguration : IEntityTypeConfiguration<TimeSheetSetting>
    {
        public void Configure(EntityTypeBuilder<TimeSheetSetting> builder)
        {
            builder.ToTable("TimeSheetSetting", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_TimeSheetSetting").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.VacationEntitlementTimePerMonth).HasColumnName(@"VacationEntitlementTimePerMonth").HasColumnType("char(5)").IsRequired().IsFixedLength().IsUnicode(false).HasMaxLength(5);
            builder.Property(x => x.BreastfeddingToleranceTime).HasColumnName(@"BreastfeddingToleranceTime").HasColumnType("char(5)").IsRequired().IsFixedLength().IsUnicode(false).HasMaxLength(5);
            builder.Property(x => x.MinimumOverTimeAfterShiftInMinut).HasColumnName(@"MinimumOverTimeAfterShiftInMinut").HasColumnType("int").IsRequired();
            builder.Property(x => x.MinimumShiftStartTimeInMinute).HasColumnName(@"MinimumShiftStartTimeInMinute").HasColumnType("int").IsRequired();
            builder.Property(x => x.ForcedOverTimeBasic).HasColumnName(@"ForcedOverTimeBasic").HasColumnType("char(5)").IsRequired().IsFixedLength().IsUnicode(false).HasMaxLength(5);
            builder.Property(x => x.WorkDayDuration).HasColumnName(@"WorkDayDuration").HasColumnType("char(5)").IsRequired().IsFixedLength().IsUnicode(false).HasMaxLength(5);
            builder.Property(x => x.MinimumDailyVacation).HasColumnName(@"MinimumDailyVacation").HasColumnType("int").IsRequired();
            builder.Property(x => x.MaximumChangeShiftInAttendAbcenseItem).HasColumnName(@"MaximumChangeShiftInAttendAbcenseItem").HasColumnType("int").IsRequired();
            builder.Property(x => x.OverTimeSpecialDayNumber).HasColumnName(@"OverTimeSpecialDayNumber").HasColumnType("int").IsRequired();
            builder.Property(x => x.MaximumAttendInMinute).HasColumnName(@"MaximumAttendInMinute").HasColumnType("int").IsRequired();
            builder.Property(x => x.TrainingStartTime).HasColumnName(@"TrainingStartTime").HasColumnType("char(5)").IsRequired().IsFixedLength().IsUnicode(false).HasMaxLength(5);
            builder.Property(x => x.TrainingEndTime).HasColumnName(@"TrainingEndTime").HasColumnType("char(5)").IsRequired().IsFixedLength().IsUnicode(false).HasMaxLength(5);
            builder.Property(x => x.MinEfficiency).HasColumnName(@"MinEfficiency").HasColumnType("decimal(3,2)").HasPrecision(3, 2).IsRequired();
            builder.Property(x => x.MaxEfficiency).HasColumnName(@"MaxEfficiency").HasColumnType("decimal(3,2)").HasPrecision(3, 2).IsRequired();
            builder.Property(x => x.InsertDate).HasColumnName(@"InsertDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.InsertUser).HasColumnName(@"InsertUser").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.UpdateDate).HasColumnName(@"UpdateDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.UpdateUser).HasColumnName(@"UpdateUser").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.DomainName).HasColumnName(@"DomainName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType("bit").IsRequired();
            builder.Property(x => x.RowVersion).HasColumnName(@"RowVersion").HasColumnType("timestamp(8)").IsRequired().IsFixedLength().HasMaxLength(8).IsRowVersion().IsConcurrencyToken();
            builder.Property(x => x.CurrentMonthMerit).HasColumnName(@"CurrentMonthMerit");
            
            
            
            builder.Property(x => x.VacationNecessaryDayPerYear).HasColumnName(@"VacationNecessaryDayPerYear").HasColumnType("int").IsRequired(false);

            builder.Property(x => x.VacationUnnecessaryDayPerYear).HasColumnName(@"VacationUnnecessaryDayPerYear").HasColumnType("int").IsRequired(false);

            builder.Property(x => x.VacationPerYear).HasColumnName(@"VacationPerYear").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.MinimumOverTimeBeforeShift).HasColumnName(@"MinimumOverTimeBeforeShift").HasColumnType("char(5)").IsRequired(false).IsFixedLength().IsUnicode(false).HasMaxLength(5);


        }
    }

}
// </auto-generated>
