// <auto-generated>
// ReSharper disable All

using Ksc.HR.Domain.Entities.Workshift;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using System;
using System.Collections.Generic;

#nullable disable

namespace Ksc.HR.Data.Persistant.Configurations
{
    // WorkCompanyUnOfficialHolidaySetting
    public class WorkCompanyUnOfficialHolidaySettingConfiguration : IEntityTypeConfiguration<WorkCompanyUnOfficialHolidaySetting>
    {
        public void Configure(EntityTypeBuilder<WorkCompanyUnOfficialHolidaySetting> builder)
        {
            builder.ToTable("WorkCompanyUnOfficialHolidaySetting", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_WorkCompanyUnOfficialHolidaySetting").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.WorkCompanySettingId).HasColumnName(@"WorkCompanySettingId").HasColumnType("int").IsRequired();
            builder.Property(x => x.WorkCalendarId).HasColumnName(@"WorkCalendarId").HasColumnType("int").IsRequired();
            builder.Property(x => x.IsHoliday).HasColumnName(@"IsHoliday").HasColumnType("bit").IsRequired();
            builder.Property(x => x.UnofficialHolidayReasonId).HasColumnName(@"UnofficialHolidayReasonId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.IsValidExtraWork).HasColumnName(@"IsValidExtraWork").HasColumnType("bit").IsRequired();
            builder.Property(x => x.IsValidExtraWorkForAllCategoryCode).HasColumnName(@"IsValidExtraWorkForAllCategoryCode").HasColumnType("bit").IsRequired();
            builder.Property(x => x.InsertDate).HasColumnName(@"InsertDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.InsertUser).HasColumnName(@"InsertUser").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.UpdateDate).HasColumnName(@"UpdateDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.UpdateUser).HasColumnName(@"UpdateUser").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.DomainName).HasColumnName(@"DomainName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType("bit").IsRequired();
            builder.Property(x => x.RowVersion).HasColumnName(@"RowVersion").HasColumnType("timestamp(8)").IsRequired().IsFixedLength().HasMaxLength(8).IsRowVersion().IsConcurrencyToken();

            // Foreign keys
            builder.HasOne(a => a.UnofficialHolidayReason).WithMany(b => b.WorkCompanyUnOfficialHolidaySettings).HasForeignKey(c => c.UnofficialHolidayReasonId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_WorkCompanyUnOfficialHolidaySetting_UnofficialHolidayReason");
            builder.HasOne(a => a.WorkCalendar).WithMany(b => b.WorkCompanyUnOfficialHolidaySettings).HasForeignKey(c => c.WorkCalendarId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_WorkCompanyUnOfficialHolidaySetting_WorkCalendar");
            builder.HasOne(a => a.WorkCompanySetting).WithMany(b => b.WorkCompanyUnOfficialHolidaySettings).HasForeignKey(c => c.WorkCompanySettingId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_WorkCompanyUnOfficialHolidaySetting_WorkCompanySetting");
        }
    }

}
// </auto-generated>
