// <auto-generated>
// ReSharper disable All

using Ksc.HR.Domain.Entities.Transfer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace Ksc.HR.Data.Persistant.Configurations
{
    // Relocation
    public class RelocationConfiguration : IEntityTypeConfiguration<Relocation>
    {
        public void Configure(EntityTypeBuilder<Relocation> builder)
        {
            builder.ToTable("Relocation", "Transfer");
            builder.HasKey(x => x.Id).HasName("PK_Relocation").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeId").HasColumnType("int").IsRequired();

            builder.Property(x => x.WfRequestId).HasColumnName(@"WFRequestId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.SourceJobPositionId).HasColumnName(@"SourceJobPositionId").HasColumnType("int").IsRequired();
            builder.Property(x => x.DestinationJobPositionId).HasColumnName(@"DestinationJobPositionId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.JobPositionFieldId).HasColumnName(@"JobPositionFieldId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.SourceTeamWorkId).HasColumnName(@"SourceTeamWorkId").HasColumnType("int").IsRequired();
            builder.Property(x => x.DestinationTeamWorkId).HasColumnName(@"DestinationTeamWorkId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.StructureId).HasColumnName(@"StructureId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.SourceEmployeeWorkTimeId).HasColumnName(@"SourceEmployeeWorkTimeId").HasColumnType("int").IsRequired();
            builder.Property(x => x.DestinationEmployeeWorkTimeId).HasColumnName(@"DestinationEmployeeWorkTimeId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.EmployeeEducationDegreeId).HasColumnName(@"EmployeeEducationDegreeId").HasColumnType("int").IsRequired();
            builder.Property(x => x.JobCategoryEducationId).HasColumnName(@"JobCategoryEducationId").HasColumnType("int").IsRequired();
            builder.Property(x => x.RelocationStatusId).HasColumnName(@"RelocationStatusId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.IsEnd).HasColumnName(@"IsEnd").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.ExecuteDate).HasColumnName(@"ExecuteDate").HasColumnType("date").IsRequired(false);
            builder.Property(x => x.RelocationTypeId).HasColumnName(@"RelocationTypeId").HasColumnType("int").IsRequired();
            builder.Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType("bit").IsRequired();
            builder.Property(x => x.InsertDate).HasColumnName(@"InsertDate").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.InsertUser).HasColumnName(@"InsertUser").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.UpdateDate).HasColumnName(@"UpdateDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.UpdateUser).HasColumnName(@"UpdateUser").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.CreateRemoteIpAddress).HasColumnName(@"CreateRemoteIpAddress").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.UpdateRemoteIpAddress).HasColumnName(@"UpdateRemoteIpAddress").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.CreateAuthenticateUserName).HasColumnName(@"CreateAuthenticateUserName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.UpdateAuthenticateUserName).HasColumnName(@"UpdateAuthenticateUserName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);

            //// Foreign keys
            builder.HasOne(a => a.Chart_JobCategoryEducation).WithMany(b => b.Relocations).HasForeignKey(c => c.JobCategoryEducationId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Relocation_JobCategoryEducation");
            builder.HasOne(a => a.Chart_JobPositionField).WithMany(b => b.Relocations).HasForeignKey(c => c.JobPositionFieldId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Relocation_JobPositionField");
            builder.HasOne(a => a.Chart_Structure).WithMany(b => b.Relocations).HasForeignKey(c => c.StructureId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Relocation_Structure");
            builder.HasOne(a => a.DestinationEmployeeWorkTime).WithMany(b => b.Relocations_DestinationEmployeeWorkTimeId).HasForeignKey(c => c.DestinationEmployeeWorkTimeId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Relocation_Destination_EmployeeWorkTime");
            builder.HasOne(a => a.DestinationJobPosition).WithMany(b => b.Relocations_DestinationJobPositionId).HasForeignKey(c => c.DestinationJobPositionId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Relocation_Destination_JobPosition");
            builder.HasOne(a => a.DestinationTeamWork).WithMany(b => b.Relocations_DestinationTeamWorkId).HasForeignKey(c => c.DestinationTeamWorkId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Relocation_Destination_TeamWork");
            builder.HasOne(a => a.EmployeeEducationDegree).WithMany(b => b.Relocations).HasForeignKey(c => c.EmployeeEducationDegreeId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Relocation_EmployeeEducationDegree");
            builder.HasOne(a => a.SourceEmployeeWorkTime).WithMany(b => b.Relocations_SourceEmployeeWorkTimeId).HasForeignKey(c => c.SourceEmployeeWorkTimeId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Relocation_Source_EmployeeWorkTime");
            builder.HasOne(a => a.SourceJobPosition).WithMany(b => b.Relocations_SourceJobPositionId).HasForeignKey(c => c.SourceJobPositionId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Relocation_Source_JobPosition");
            builder.HasOne(a => a.SourceTeamWork).WithMany(b => b.Relocations_SourceTeamWorkId).HasForeignKey(c => c.SourceTeamWorkId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Relocation_Source_TeamWork");
            builder.HasOne(a => a.RelocationType).WithMany(b => b.Relocations).HasForeignKey(c => c.RelocationTypeId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Relocation_RelocationType");
            builder.HasOne(a => a.WF_Request).WithMany(b => b.Relocations).HasForeignKey(c => c.WfRequestId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Relocation_Request");
            builder.HasOne(a => a.Employee).WithMany(b => b.Relocations).HasForeignKey(c => c.EmployeeId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Relocation_Employee");
            
            builder.HasOne(a => a.RelocationStatus).WithMany(b => b.Relocations).HasForeignKey(c => c.RelocationStatusId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Relocation_RelocationStatus");

        }
    }

}
// </auto-generated>
