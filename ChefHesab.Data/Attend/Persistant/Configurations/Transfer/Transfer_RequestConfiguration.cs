// <auto-generated>
// ReSharper disable All

using Ksc.HR.Domain.Entities.Transfer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace Ksc.HR.Data.Persistant.Configurations
{
    // Request
    public class Transfer_RequestConfiguration : IEntityTypeConfiguration<Transfer_Request>
    {
        public void Configure(EntityTypeBuilder<Transfer_Request> builder)
        {
            builder.ToTable("Request", "Transfer");
            builder.HasKey(x => x.Id).HasName("PK_Request").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.WfRequestId).HasColumnName(@"WFRequestId").HasColumnType("int").IsRequired();
            builder.Property(x => x.LastTeamWorkId).HasColumnName(@"LastTeamWorkId").HasColumnType("int").IsRequired();
            builder.Property(x => x.LastWorkGroupId).HasColumnName(@"LastWorkGroupId").HasColumnType("int").IsRequired();
            builder.Property(x => x.RequestdTeamWorkId).HasColumnName(@"RequestdTeamWorkId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.RequestdWorkGroupId).HasColumnName(@"RequestdWorkGroupId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.TransferChangeDate).HasColumnName(@"TransferChangeDate").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.TransferReturnDate).HasColumnName(@"TransferReturnDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.TransferRequestReasonTypeId).HasColumnName(@"TransferRequestReasonTypeId").HasColumnType("int").IsRequired();
            builder.Property(x => x.RefereReason).HasColumnName(@"RefereReason").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);

            // Foreign keys
            builder.HasOne(a => a.LastTeamWork).WithMany(b => b.Transfer_Requests_LastTeamWorkId).HasForeignKey(c => c.LastTeamWorkId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Request_TeamWork_Last");
            builder.HasOne(a => a.LastWorkGroup).WithMany(b => b.Transfer_Requests_LastWorkGroupId).HasForeignKey(c => c.LastWorkGroupId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Request_WorkGroup_Last");
            builder.HasOne(a => a.RequestdTeamWork).WithMany(b => b.Transfer_Requests_RequestdTeamWorkId).HasForeignKey(c => c.RequestdTeamWorkId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Request_TeamWork_Requested");
            builder.HasOne(a => a.RequestdWorkGroup).WithMany(b => b.Transfer_Requests_RequestdWorkGroupId).HasForeignKey(c => c.RequestdWorkGroupId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Request_WorkGroup_Requested");
            builder.HasOne(a => a.Transfer_RequestReasonType).WithMany(b => b.Transfer_Requests).HasForeignKey(c => c.TransferRequestReasonTypeId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Request_RequestReasonType");
            builder.HasOne(a => a.WF_Request).WithMany(b => b.Transfer_Requests).HasForeignKey(c => c.WfRequestId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Request_Request");
        }
    }

}
// </auto-generated>
