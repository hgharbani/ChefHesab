// <auto-generated>
// ReSharper disable All

using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Ksc.HR.Domain.Entities.Chart;
using System.Reflection.Emit;

namespace Ksc.HR.Data.Persistant.Configurations.Chart
{
    // JobPosition
    public class Chart_JobPositionConfiguration : IEntityTypeConfiguration<Chart_JobPosition>
    {
        public void Configure(EntityTypeBuilder<Chart_JobPosition> builder)
        {
            builder.ToTable("JobPosition", "Chart");
            builder.HasKey(x => x.Id).HasName("PK_JobPosition").IsClustered();

            builder.Property(x => x.LevelNumber).HasColumnName(@"LevelNumber").HasColumnType("int").IsRequired(false);

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Code).HasColumnName(@"Code").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.ParentMisCode).HasColumnName(@"ParentMisCode").HasColumnType("nvarchar(MAX)").IsRequired(false);
            builder.Property(x => x.CostCenter).HasColumnName(@"CostCenter").HasColumnType("numeric(6,0)").HasPrecision(6, 0).IsRequired(false);
            builder.Property(x => x.Title).HasColumnName(@"Title").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.StructureId).HasColumnName(@"StructureId").HasColumnType("int").IsRequired();
            builder.Property(x => x.JobIdentityId);
            builder.Property(x => x.JobPoisitionStatusId);
            builder.Property(x => x.JobPositionNatureId);
            builder.Property(x => x.JobPositionNatureSubGroupId).IsRequired(false);

            builder.Property(x => x.StartDate).HasColumnName(@"StartDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.StructureEndDate).HasColumnName(@"StructureEndDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.CapacityCount).HasColumnName(@"CapacityCount").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.WorkingDayCount).HasColumnName(@"WorkingDayCount").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.WorkingShiftCount).HasColumnName(@"WorkingShiftCount").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.WorkingDayOutsourcingCount).HasColumnName(@"WorkingDayOutsourcingCount").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.WorkingShiftOutsourcingCount).HasColumnName(@"WorkingShiftOutsourcingCount").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PermissionExistCommodityCount).HasColumnName(@"PermissionExistCommodityCount").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.TemporaryCount).HasColumnName(@"TemporaryCount").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.SubstituteCount).HasColumnName(@"SubstituteCount").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ExtraCount).HasColumnName(@"ExtraCount").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.IsOnCall).HasColumnName(@"IsOnCall").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.IsStrategic).HasColumnName(@"IsStrategic").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.InsuranceJobCode).HasColumnName(@"InsuranceJobCode").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.RewardSpecificEfficincy).HasColumnName(@"RewardSpecificEfficincy").HasColumnType("float").HasPrecision(53).IsRequired(false);
            builder.Property(x => x.CofficientProximityProduct).HasColumnName(@"CofficientProximityProduct").HasColumnType("float").HasPrecision(53).IsRequired(false);
            builder.Property(x => x.ParentId).HasColumnName(@"ParentId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.SpecificRewardId);
            builder.Property(x => x.MisJobPositionCode).HasColumnName(@"MisJobPositionCode").HasColumnType("nvarchar(100)").IsRequired(false);
            builder.Property(x => x.CodeRelations).HasColumnName(@"CodeRelations").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.NewCodeRelation).HasColumnName(@"NewCodeRelation").HasColumnType("nvarchar(max)").IsRequired(false);
            
            builder.Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar(max)").IsRequired(false);



            builder.Property(x => x.InsertDate).HasColumnName(@"InsertDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.InsertUser).HasColumnName(@"InsertUser").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.UpdateDate).HasColumnName(@"UpdateDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.UpdateUser).HasColumnName(@"UpdateUser").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType("bit").IsRequired();

            // Foreign keys
            builder.HasOne(t => t.Chart_JobIdentity)
                           .WithMany(t => t.Chart_JobPositions)
                           .HasForeignKey(d => d.JobIdentityId);




            builder.HasOne(a => a.Chart_JobPositionStatu).WithMany(b => b.Chart_JobPositions).HasForeignKey(c => c.JobPoisitionStatusId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_JobPosition_JobPositionStatus");
            builder.HasOne(a => a.Chart_RewardSpecific).WithMany(b => b.Chart_JobPositions).HasForeignKey(c => c.SpecificRewardId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_JobPosition_RewardSpecific");
            builder.HasOne(a => a.Chart_Structure).WithMany(b => b.Chart_JobPositions).HasForeignKey(c => c.StructureId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_JobPosition_Structure");
            builder.HasOne(a => a.Parent).WithMany(b => b.Chart_JobPositions).HasForeignKey(c => c.ParentId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_JobPosition_JobPosition");

            builder.HasOne(t => t.ProductionEfficiency)
   .WithMany(t => t.Chart_JobPositions)
 .HasForeignKey(d => d.ProductionEfficiencyId);

            builder.HasOne(t => t.CategoryCoefficient)
           .WithMany(t => t.Chart_JobPositions)
         .HasForeignKey(d => d.CategoryCoefficientId);

            builder.HasOne(t => t.CofficientProximityProductTable)
           .WithMany(t => t.Chart_JobPositions)
           .HasForeignKey(d => d.CofficientProximityProductId);
        }
    }

}
// </auto-generated>
