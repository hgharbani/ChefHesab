// <auto-generated>
// ReSharper disable All

using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Ksc.HR.Domain.Entities.Chart;

namespace Ksc.HR.Data.Persistant.Configurations.Chart
{
    // RewardSpecific
    public class Chart_RewardSpecificConfiguration : IEntityTypeConfiguration<Chart_RewardSpecific>
    {
        public void Configure(EntityTypeBuilder<Chart_RewardSpecific> builder)
        {
            builder.ToTable("RewardSpecific", "Chart");
            builder.HasKey(x => x.Id).HasName("PK_RewardSpecific").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired();
            builder.Property(x => x.Title).HasColumnName(@"Title").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.RewardUnitTypeId).HasColumnName(@"RewardUnitTypeId").HasColumnType("int").IsRequired();

            builder.Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType("bit").IsRequired();
            builder.Property(x => x.InsertDate).HasColumnName(@"InsertDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.InsertUser).HasColumnName(@"InsertUser").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.UpdateDate).HasColumnName(@"UpdateDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.UpdateUser).HasColumnName(@"UpdateUser").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            // Foreign keys
            builder.HasOne(a => a.RewardUnitType).WithMany(b => b.RewardSpecifics).HasForeignKey(c => c.RewardUnitTypeId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_RewardSpecific_RewardUnitType");

        }
    }

}
// </auto-generated>
