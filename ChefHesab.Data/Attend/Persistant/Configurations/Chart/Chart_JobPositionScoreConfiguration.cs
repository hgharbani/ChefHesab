// <auto-generated>
// ReSharper disable All

using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Ksc.HR.Domain.Entities.Chart;

namespace Ksc.HR.Data.Persistant.Configurations.Chart
{
    // JobPositionScore
    public class Chart_JobPositionScoreConfiguration : IEntityTypeConfiguration<Chart_JobPositionScore>
    {
        public void Configure(EntityTypeBuilder<Chart_JobPositionScore> builder)
        {
            builder.ToTable("JobPositionScore", "Chart");
            builder.HasKey(x => x.Id).HasName("PK_JobPositionScore").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.JobPositionScoreTypeId).HasColumnName(@"JobPositionScoreTypeId").HasColumnType("int").IsRequired();
            builder.Property(x => x.Score).HasColumnName(@"Score").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.StartDate).HasColumnName(@"StartDate").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.InsertUser).HasColumnName(@"InsertUser").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.InsertDate).HasColumnName(@"InsertDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.UpdateUser).HasColumnName(@"UpdateUser").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.UpdateDate).HasColumnName(@"UpdateDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType("bit").IsRequired();
            builder.Property(x => x.JobPositionId).HasColumnName(@"JobPositionId").HasColumnType("int").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.Chart_JobPosition).WithMany(b => b.Chart_JobPositionScores).HasForeignKey(c => c.JobPositionId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_JobPositionScore_JobPosition");
            builder.HasOne(a => a.Chart_JobPositionScoreType).WithMany(b => b.Chart_JobPositionScores).HasForeignKey(c => c.JobPositionScoreTypeId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_JobPositionScore_JobPositionScoreType");
        }
    }

}
// </auto-generated>
