// <auto-generated>
// ReSharper disable All

using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Ksc.HR.Domain.Entities.Chart;

namespace Ksc.HR.Data.Persistant.Configurations.Chart
{
    // JobPositionHistory
    public class Chart_JobPositionHistoryConfiguration : IEntityTypeConfiguration<Chart_JobPositionHistory>
    {
        public void Configure(EntityTypeBuilder<Chart_JobPositionHistory> builder)
        {
            // Table & Column Mappings
            builder.ToTable("JobPositionHistory", "Chart");
            builder.Property(t => t.Id).HasColumnName("Id");
            builder.Property(t => t.StructureId).HasColumnName("StructureId");
            builder.Property(x => x.CostCenter).HasColumnName(@"CostCenter").HasColumnType("numeric(6,0)").HasPrecision(6, 0).IsRequired(false);

            builder.Property(x => x.JobIdentityId);

            builder.Property(x => x.JobPoisitionStatusId);

            builder.Property(t => t.StartDate).HasColumnName("StartDate");
            builder.Property(t => t.EndDate).HasColumnName("EndDate");
            builder.Property(t => t.StructureEndDate).HasColumnName("StructureEndDate");
            builder.Property(t => t.CapacityCount).HasColumnName("CapacityCount");
            builder.Property(t => t.WorkingDayCount).HasColumnName("WorkingDayCount");
            builder.Property(t => t.WorkingShiftCount).HasColumnName("WorkingShiftCount");
            builder.Property(t => t.WorkingDayOutsourcingCount).HasColumnName("WorkingDayOutsourcingCount");
            builder.Property(t => t.WorkingShiftOutsourcingCount).HasColumnName("WorkingShiftOutsourcingCount");
            builder.Property(t => t.PermissionExistCommodityCount).HasColumnName("PermissionExistCommodityCount");
            builder.Property(t => t.TemporaryCount).HasColumnName("TemporaryCount");
            builder.Property(t => t.SubstituteCount).HasColumnName("SubstituteCount");
            builder.Property(t => t.ExtraCount).HasColumnName("ExtraCount");
            builder.Property(t => t.IsOnCall).HasColumnName("IsOnCall");
            builder.Property(t => t.IsStrategic).HasColumnName("IsStrategic");
            builder.Property(t => t.InsuranceJobCode).HasColumnName("InsuranceJobCode");
            builder.Property(t => t.RewardSpecificEfficincy).HasColumnName("RewardSpecificEfficincy");
            builder.Property(t => t.CofficientProximityProduct).HasColumnName("CofficientProximityProduct");
            builder.Property(t => t.ParentId).HasColumnName("ParentId");
            builder.Property(t => t.SpecificRewardId).HasColumnName("SpecificRewardId");
            builder.Property(t => t.Description).HasColumnName("Description");
            builder.Property(t => t.JobPositionId).HasColumnName("JobPositionId");
            builder.Property(t => t.Code).HasColumnName("Code");
            builder.Property(t => t.Title).HasColumnName("Title");
            builder.Property(t => t.JobPositionNatureId).HasColumnName("JobPositionNatureId");
            builder.Property(t => t.InsertDate).HasColumnName("InsertDate");
            builder.Property(t => t.InsertUser).HasColumnName("InsertUser");
            builder.Property(t => t.UpdateDate).HasColumnName("UpdateDate");
            builder.Property(t => t.UpdateUser).HasColumnName("UpdateUser");
            builder.Property(t => t.IsActive).HasColumnName("IsActive").IsRequired();




            builder.HasOne(t => t.JobIdentity)
           .WithMany(t => t.Chart_JobPositionHistories)
         .HasForeignKey(d => d.JobIdentityId);




            builder.HasOne(t => t.JobPositionStatus)
           .WithMany(t => t.Chart_JobPositionHistories)
         .HasForeignKey(d => d.JobPoisitionStatusId);

            //builder.HasOne(a => a.JobPositionStatus)
            //    .WithMany(b => b.Chart_JobPositionHistories)
            //    .HasForeignKey(c => c.JobPoisitionStatusId)
            //    .OnDelete(DeleteBehavior.ClientSetNull)
            //    .HasConstraintName("FK_JobPosition_JobPositionStatus");


            builder.HasOne(t => t.RewardSpecific)
           .WithMany(t => t.Chart_JobPositionHistories)
         .HasForeignKey(d => d.SpecificRewardId);


            builder.HasOne(t => t.JobPosition)
           .WithMany(t => t.JobPositionHistory)
         .HasForeignKey(d => d.JobPositionId);



            builder.HasOne(t => t.JobPositionNature)
           .WithMany(t => t.JobPositionHistory)
         .HasForeignKey(d => d.JobPositionNatureId);


            builder.HasOne(t => t.Chart_Structure)
.WithMany(t => t.JobPositionHistory)
.HasForeignKey(d => d.StructureId);



        }

    }

}
// </auto-generated>
