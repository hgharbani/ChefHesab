// <auto-generated>
// ReSharper disable All

using Ksc.HR.Domain.Entities.EmployeeBase;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace Ksc.HR.Data.Persistant.Configurations.EmployeeBase

{
    // InsuranceList
    public class InsuranceListConfiguration : IEntityTypeConfiguration<InsuranceList>
    {
        public void Configure(EntityTypeBuilder<InsuranceList> builder)
        {
            builder.ToTable("InsuranceList", "EmployeeBase");
            builder.HasKey(x => x.Id).HasName("PK_InsuranceList").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Title).HasColumnName(@"Title").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.InsuranceTypeId).HasColumnName(@"InsuranceTypeId").HasColumnType("int").IsRequired();
            builder.Property(x => x.WorkShopCode).HasColumnName(@"WorkShopCode").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Address).HasColumnName(@"Address").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.AgreementRow).HasColumnName(@"AgreementRow").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.InsertDate).HasColumnName(@"InsertDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.InsertUser).HasColumnName(@"InsertUser").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.UpdateDate).HasColumnName(@"UpdateDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.UpdateUser).HasColumnName(@"UpdateUser").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType("bit").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.InsuranceType).WithMany(b => b.InsuranceLists).HasForeignKey(c => c.InsuranceTypeId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_InsuranceList_InsuranceType");
        }
    }

}
// </auto-generated>
