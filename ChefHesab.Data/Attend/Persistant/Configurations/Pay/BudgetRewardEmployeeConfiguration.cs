// <auto-generated>
// ReSharper disable All

using Ksc.HR.Domain.Entities.Pay;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace Ksc.Hr.Data.Persistant.Configurations.Pay

{
    // BudgetRewardEmployee
    public class BudgetRewardEmployeeConfiguration : IEntityTypeConfiguration<BudgetRewardEmployee>
    {
        public void Configure(EntityTypeBuilder<BudgetRewardEmployee> builder)
        {
            builder.ToTable("BudgetRewardEmployee", "Pay");
            builder.HasKey(x => x.Id).HasName("PK_BudgetRewardRecipient").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.BudgetRewardDetailId).HasColumnName(@"BudgetRewardDetailId").HasColumnType("int").IsRequired();
            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeId").HasColumnType("int").IsRequired();
            builder.Property(x => x.RewardAmount).HasColumnName(@"RewardAmount").HasColumnType("bigint").IsRequired();
            builder.Property(x => x.TeamWorkId).HasColumnName(@"TeamWorkId").HasColumnType("int").IsRequired();
            builder.Property(x => x.YearMonth).HasColumnName(@"YearMonth").HasColumnType("int").IsRequired();
            builder.Property(x => x.BudgetRewardStatusId).HasColumnName(@"BudgetRewardStatusId").HasColumnType("int").IsRequired();
            builder.Property(x => x.JobPositionId).HasColumnName(@"JobPositionId").HasColumnType("int").IsRequired();
            builder.Property(x => x.IsExtra).HasColumnName(@"IsExtra").HasColumnType("bit").IsRequired();

            builder.Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType("bit").IsRequired();
            builder.Property(x => x.InsertDate).HasColumnName(@"InsertDate").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.InsertUser).HasColumnName(@"InsertUser").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.UpdateDate).HasColumnName(@"UpdateDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.UpdateUser).HasColumnName(@"UpdateUser").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.DomainName).HasColumnName(@"DomainName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);

            // Foreign keys
            builder.HasOne(a => a.Chart_JobPosition).WithMany(b => b.BudgetRewardEmployees).HasForeignKey(c => c.JobPositionId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_BudgetRewardEmployee_JobPosition");
            builder.HasOne(a => a.Employee).WithMany(b => b.BudgetRewardEmployees).HasForeignKey(c => c.EmployeeId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_BudgetRewardEmployee_Employee");
            builder.HasOne(a => a.BudgetRewardDetail).WithMany(b => b.BudgetRewardEmployees).HasForeignKey(c => c.BudgetRewardDetailId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_BudgetRewardEmployee_BudgetRewardDetail");
            builder.HasOne(a => a.BudgetRewardStatus).WithMany(b => b.BudgetRewardEmployees).HasForeignKey(c => c.BudgetRewardStatusId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_BudgetRewardEmployee_BudgetRewardStatus");
            builder.HasOne(a => a.TeamWork).WithMany(b => b.BudgetRewardEmployees).HasForeignKey(c => c.TeamWorkId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_BudgetRewardEmployee_TeamWork");
        }
    }

}
// </auto-generated>
