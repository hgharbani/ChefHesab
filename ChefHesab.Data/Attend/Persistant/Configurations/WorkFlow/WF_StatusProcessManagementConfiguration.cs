// <auto-generated>
// ReSharper disable All

using Ksc.HR.Domain.Entities.WorkFlow;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace Ksc.HR.Data.Persistant.Configurations
{
    // StatusProcessManagement
    public class WF_StatusProcessManagementConfiguration : IEntityTypeConfiguration<WF_StatusProcessManagement>
    {
        public void Configure(EntityTypeBuilder<WF_StatusProcessManagement> builder)
        {
            builder.ToTable("StatusProcessManagement", "WF");
            builder.HasKey(x => x.Id).HasName("PK_WF_StatusProcessManagement").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.ProcessId).HasColumnName(@"ProcessId").HasColumnType("int").IsRequired();
            builder.Property(x => x.StatusId).HasColumnName(@"StatusId").HasColumnType("int").IsRequired();
            builder.Property(x => x.IsFirstStatus).HasColumnName(@"IsFirstStatus").HasColumnType("bit").IsRequired();
            builder.Property(x => x.IsLastStatus).HasColumnName(@"IsLastStatus").HasColumnType("bit").IsRequired();
            builder.Property(x => x.IsNeedDescription).HasColumnName(@"IsNeedDescription").HasColumnType("bit").IsRequired();
            builder.Property(x => x.IsMainDirection).HasColumnName(@"IsMainDirection").HasColumnType("bit").IsRequired();
            builder.Property(x => x.IsReference).HasColumnName(@"IsReference").HasColumnType("bit").IsRequired();
            builder.Property(x => x.IsEntryStatus).HasColumnName(@"IsEntryStatus").HasColumnType("bit").IsRequired();
            builder.Property(x => x.IsPossibleDirection).HasColumnName(@"IsPossibleDirection").HasColumnType("bit").IsRequired();
            builder.Property(x => x.Order).HasColumnName(@"Order").HasColumnType("int").IsRequired();
            builder.Property(x => x.RoleId).HasColumnName(@"RoleId").HasColumnType("int").IsRequired();
            builder.Property(x => x.IsChartResponse).HasColumnName(@"IsChartResponse").HasColumnType("bit").IsRequired();
            builder.Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType("bit").IsRequired();
            builder.Property(x => x.InsertDate).HasColumnName(@"InsertDate").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.InsertUser).HasColumnName(@"InsertUser").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.UpdateDate).HasColumnName(@"UpdateDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.UpdateUser).HasColumnName(@"UpdateUser").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.IsInbox).HasColumnName(@"IsInbox").HasColumnType("bit").IsRequired();
            builder.Property(x => x.IsNotInbox).HasColumnName(@"IsNotInbox").HasColumnType("bit").IsRequired();
            builder.Property(x => x.IsRequest).HasColumnName(@"IsRequest").HasColumnType("bit").IsRequired();
            builder.Property(x => x.IsEtr).HasColumnName(@"IsEtr").HasColumnType("bit").IsRequired();
            builder.Property(x => x.IsAccessAttachFiles).HasColumnName(@"IsAccessAttachFiles").HasColumnType("bit").IsRequired();
            builder.Property(x => x.PriorityId).HasColumnName(@"PriorityId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.IsReferToShow).HasColumnName(@"IsReferToShow").HasColumnType("bit").IsRequired();
            builder.Property(x => x.IsPublicKartabl).HasColumnName(@"IsPublicKartabl").HasColumnType("bit").IsRequired();
            builder.Property(x => x.ShowInISKartabl).HasColumnName(@"ShowInISKartabl").HasColumnType("bit").IsRequired();
            builder.Property(x => x.IsPortalKartabl).HasColumnName(@"IsPortalKartabl").HasColumnType("bit").IsRequired();
            // Foreign keys
            builder.HasOne(a => a.WF_Priority).WithMany(b => b.WF_StatusProcessManagements).HasForeignKey(c => c.PriorityId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_WF_StatusProcessManagement_WF_Priority");
            builder.HasOne(a => a.WF_Process).WithMany(b => b.WF_StatusProcessManagements).HasForeignKey(c => c.ProcessId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_WF_StatusProcessManagement_WF_Process");
            builder.HasOne(a => a.WF_Role).WithMany(b => b.WF_StatusProcessManagements).HasForeignKey(c => c.RoleId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_WF_StatusProcessManagement_WF_Role");
            builder.HasOne(a => a.WF_Status).WithMany(b => b.WF_StatusProcessManagements).HasForeignKey(c => c.StatusId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_WF_StatusProcessManagement_WF_Status");
        }
    }

}
// </auto-generated>
