// <auto-generated>
// ReSharper disable All
using Ksc.HR.Domain.Entities.WorkFlow;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace Ksc.HR.Data.Persistant.Configurations
{
    // RequestHistory
    public class WF_RequestHistoryConfiguration : IEntityTypeConfiguration<WF_RequestHistory>
    {
        public void Configure(EntityTypeBuilder<WF_RequestHistory> builder)
        {
            builder.ToTable("RequestHistory", "WF");
            builder.HasKey(x => x.Id).HasName("PK_WF_RequestHistory").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.RequestId).HasColumnName(@"RequestId").HasColumnType("int").IsRequired();
            builder.Property(x => x.StatusId).HasColumnName(@"StatusId").HasColumnType("int").IsRequired();
            builder.Property(x => x.WorkDescription).HasColumnName(@"WorkDescription").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.ChangeStatusDescription).HasColumnName(@"ChangeStatusDescription").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.ReferTo).HasColumnName(@"ReferTo").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.ParentId).HasColumnName(@"ParentId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.StatusReasonId).HasColumnName(@"StatusReasonId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.SuperiorJobPositionCode).HasColumnName(@"SuperiorJobPositionCode").HasColumnType("nvarchar(13)").IsRequired(false).HasMaxLength(13);
            builder.Property(x => x.JobPositionCode).HasColumnName(@"JobPositionCode").HasColumnType("nvarchar(13)").IsRequired(false).HasMaxLength(13);
            builder.Property(x => x.JobCategoryCode).HasColumnName(@"JobCategoryCode").HasColumnType("nvarchar(2)").IsRequired(false).HasMaxLength(2);
            builder.Property(x => x.JobPositionTitle).HasColumnName(@"JobPositionTitle").HasColumnType("nvarchar(200)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.InsertDate).HasColumnName(@"InsertDate").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.StartUser).HasColumnName(@"StartUser").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.StartDate).HasColumnName(@"StartDate").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.EndUser).HasColumnName(@"EndUser").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.IsReferToRequestEmployeeId).HasColumnName(@"IsReferToRequestEmployeeId").HasColumnType("bit").IsRequired();
            builder.Property(x => x.CodeWorkDescription).HasColumnName(@"CodeWorkDescription").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.StartUserAuthenticateUserName).HasColumnName(@"StartUserAuthenticateUserName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.EndUserAuthenticateUserName).HasColumnName(@"EndUserAuthenticateUserName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.ReturnToKartabl).HasColumnName(@"ReturnToKartabl").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.AutoRecord).HasColumnName(@"AutoRecord").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.WorkFlowActionId).HasColumnName(@"WorkFlowActionId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.TreeTitle).HasColumnName(@"TreeTitle").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
            // Foreign keys
            builder.HasOne(a => a.Parent).WithMany(b => b.WF_RequestHistories).HasForeignKey(c => c.ParentId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_WF_RequestHistory_WF_RequestHistory");
            builder.HasOne(a => a.WF_Request).WithMany(b => b.WF_RequestHistories).HasForeignKey(c => c.RequestId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_WF_RequestHistory_WF_Request");
            builder.HasOne(a => a.WF_Status).WithMany(b => b.WF_RequestHistories).HasForeignKey(c => c.StatusId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_WF_RequestHistory_WF_Status");
            builder.HasOne(a => a.WF_StatusReason).WithMany(b => b.WF_RequestHistories).HasForeignKey(c => c.StatusReasonId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_WF_RequestHistory_WF_StatusReason");
            builder.HasOne(a => a.WF_WorkFlowAction).WithMany(b => b.WF_RequestHistories).HasForeignKey(c => c.WorkFlowActionId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_RequestHistory_WorkFlowAction");
        }
    }

}
// </auto-generated>
