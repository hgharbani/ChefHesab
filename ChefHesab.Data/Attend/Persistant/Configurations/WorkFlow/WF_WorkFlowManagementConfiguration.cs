// <auto-generated>
// ReSharper disable All
using Ksc.HR.Domain.Entities.WorkFlow;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace Ksc.HR.Data.Persistant.Configurations
{
    // WorkFlowManagement
    public class WF_WorkFlowManagementConfiguration : IEntityTypeConfiguration<WF_WorkFlowManagement>
    {
        public void Configure(EntityTypeBuilder<WF_WorkFlowManagement> builder)
        {
            builder.ToTable("WorkFlowManagement", "WF");
            builder.HasKey(x => x.Id).HasName("PK_WF_WorkFlowManagement").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.CurrentStatusId).HasColumnName(@"CurrentStatusId").HasColumnType("int").IsRequired();
            builder.Property(x => x.NextStatusId).HasColumnName(@"NextStatusId").HasColumnType("int").IsRequired();
            builder.Property(x => x.IsManual).HasColumnName(@"IsManual").HasColumnType("bit").IsRequired();
            builder.Property(x => x.IsRecursive).HasColumnName(@"IsRecursive").HasColumnType("bit").IsRequired();
            builder.Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType("bit").IsRequired();
            builder.Property(x => x.InsertDate).HasColumnName(@"InsertDate").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.InsertUser).HasColumnName(@"InsertUser").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.UpdateDate).HasColumnName(@"UpdateDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.UpdateUser).HasColumnName(@"UpdateUser").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.ProcessId).HasColumnName(@"ProcessId").HasColumnType("int").IsRequired();
            builder.Property(x => x.IsRequest).HasColumnName(@"IsRequest").HasColumnType("bit").IsRequired();
            builder.Property(x => x.IsInbox).HasColumnName(@"IsInbox").HasColumnType("bit").IsRequired();
            builder.Property(x => x.IsReferTo).HasColumnName(@"IsReferTo").HasColumnType("bit").IsRequired();
            builder.Property(x => x.IsReferToSubActivity).HasColumnName(@"IsReferToSubActivity").HasColumnType("bit").IsRequired();
            builder.Property(x => x.PriorityId).HasColumnName(@"PriorityId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.IsToChart).HasColumnName(@"IsToChart").HasColumnType("bit").IsRequired();
            builder.Property(x => x.JavaScriptFunction).HasColumnName(@"JavaScriptFunction").HasColumnType("nvarchar(100)").HasMaxLength(100);
            builder.Property(x => x.ChangeParentStatus).HasColumnName(@"ChangeParentStatus").HasColumnType("bit").IsRequired();
            builder.Property(x => x.ChangeParentStatusAfterAllChildInLastStatus).HasColumnName(@"ChangeParentStatusAfterAllChildInLastStatus").HasColumnType("bit").IsRequired();
            builder.Property(x => x.ChangeChildStatus).HasColumnName(@"ChangeChildStatus").HasColumnType("bit").IsRequired();
            builder.Property(x => x.GenerateChildIsManual).HasColumnName(@"GenerateChildIsManual").HasColumnType("bit").IsRequired();
            builder.Property(x => x.CompatibleWithToChart).HasColumnName(@"CompatibleWithToChart").HasColumnType("bit").IsRequired();
            builder.Property(x => x.IsReferToRequestEmployeeId).HasColumnName(@"IsReferToRequestEmployeeId").HasColumnType("bit").IsRequired();
            builder.Property(x => x.WorkFlowActionId).HasColumnName(@"WorkFlowActionId").HasColumnType("int").IsRequired(false);
            //builder.Property(x => x.IsReversible).HasColumnName(@"IsReversible").HasColumnType("bit").IsRequired();
            // Foreign keys
            builder.HasOne(a => a.CurrentStatus).WithMany(b => b.WF_WorkFlowManagements_CurrentStatusId).HasForeignKey(c => c.CurrentStatusId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_WorkFlowManagement_Status");
            builder.HasOne(a => a.NextStatus).WithMany(b => b.WF_WorkFlowManagements_NextStatusId).HasForeignKey(c => c.NextStatusId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_WF_WorkFlowManagement_Status");
            builder.HasOne(a => a.WF_Priority).WithMany(b => b.WF_WorkFlowManagements).HasForeignKey(c => c.PriorityId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_WF_WorkFlowManagement_WF_Priority");
            builder.HasOne(a => a.WF_Process).WithMany(b => b.WF_WorkFlowManagements).HasForeignKey(c => c.ProcessId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_WF_WorkFlowManagement_WF_Process");
            builder.HasOne(a => a.WF_WorkFlowAction).WithMany(b => b.WF_WorkFlowManagements).HasForeignKey(c => c.WorkFlowActionId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_WorkFlowManagement_WorkFlowAction");
        }
    }

}
// </auto-generated>
