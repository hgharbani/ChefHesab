// <auto-generated>
// ReSharper disable All
using Ksc.HR.Domain.Entities.WorkFlow;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace Ksc.HR.Data.Persistant.Configurations
{
    // Request
    public class WF_RequestConfiguration : IEntityTypeConfiguration<WF_Request>
    {
        public void Configure(EntityTypeBuilder<WF_Request> builder)
        {
            builder.ToTable("Request", "WF");
            builder.HasKey(x => x.Id).HasName("PK_WF_Request").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.PriorityId).HasColumnName(@"PriorityId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar(max)").IsRequired();
            builder.Property(x => x.RequiredDate).HasColumnName(@"RequiredDate").HasColumnType("date").IsRequired(false);
            builder.Property(x => x.CostCenter).HasColumnName(@"CostCenter").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.Phone).HasColumnName(@"Phone").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.ProcessId).HasColumnName(@"ProcessId").HasColumnType("int").IsRequired();
            builder.Property(x => x.StatusId).HasColumnName(@"StatusId").HasColumnType("int").IsRequired();
            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.SuperiorJobPositionCode).HasColumnName(@"SuperiorJobPositionCode").HasColumnType("nvarchar(13)").IsRequired(false).HasMaxLength(13);
            builder.Property(x => x.SuperiorJobPositionCodeTemp).HasColumnName(@"SuperiorJobPositionCodeTemp").HasColumnType("nvarchar(13)").IsRequired(false).HasMaxLength(13);
            builder.Property(x => x.RefereToTeamWorkId).HasColumnName(@"RefereToTeamWorkId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ParentRequestId).HasColumnName(@"ParentRequestId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType("bit").IsRequired();
            builder.Property(x => x.InsertDate).HasColumnName(@"InsertDate").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.InsertUser).HasColumnName(@"InsertUser").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.UpdateDate).HasColumnName(@"UpdateDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.UpdateUser).HasColumnName(@"UpdateUser").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.RequestUser).HasColumnName(@"RequestUser").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.ReferTo).HasColumnName(@"ReferTo").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.DeleteUser).HasColumnName(@"DeleteUser").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.DeleteDate).HasColumnName(@"DeleteDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.RequestTypeTitle).HasColumnName(@"RequestTypeTitle").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.IsReferToRequestEmployeeId).HasColumnName(@"IsReferToRequestEmployeeId").HasColumnType("bit").IsRequired();
            builder.Property(x => x.InsertAuthenticateUserName).HasColumnName(@"InsertAuthenticateUserName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.UpdateAuthenticateUserName).HasColumnName(@"UpdateAuthenticateUserName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.WorkFlowActionId).HasColumnName(@"WorkFlowActionId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.LastStatusId).HasColumnName(@"LastStatusId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.LastSuperiorJobPositionCode).HasColumnName(@"LastSuperiorJobPositionCode").HasColumnType("nvarchar(13)").IsRequired(false).HasMaxLength(13);
            builder.Property(x => x.LastSuperiorJobPositionCodeTemp).HasColumnName(@"LastSuperiorJobPositionCodeTemp").HasColumnType("nvarchar(13)").IsRequired(false).HasMaxLength(13);
            builder.Property(x => x.RowVersion).HasColumnName(@"RowVersion").HasColumnType("timestamp(8)").IsRequired().IsFixedLength().HasMaxLength(8).IsRowVersion().IsConcurrencyToken();
            // Foreign keys
            builder.HasOne(a => a.Employee).WithMany(b => b.WF_Requests).HasForeignKey(c => c.EmployeeId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_WF_Request_Employee");
            builder.HasOne(a => a.LastStatus).WithMany(b => b.WF_Requests_LastStatusId).HasForeignKey(c => c.LastStatusId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Request_LastStatus");
            builder.HasOne(a => a.ParentRequest).WithMany(b => b.WF_Requests).HasForeignKey(c => c.ParentRequestId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Request_ParentRequest");
            builder.HasOne(a => a.TeamWork).WithMany(b => b.WF_Requests).HasForeignKey(c => c.RefereToTeamWorkId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Request_TeamWork");
            builder.HasOne(a => a.WF_Priority).WithMany(b => b.WF_Requests).HasForeignKey(c => c.PriorityId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_WF_Request_WF_Priority");
            builder.HasOne(a => a.WF_Process).WithMany(b => b.WF_Requests).HasForeignKey(c => c.ProcessId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_WF_Request_WF_Process");
            builder.HasOne(a => a.WF_Status).WithMany(b => b.WF_Requests).HasForeignKey(c => c.StatusId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Request_Status");
            builder.HasOne(a => a.WF_WorkFlowAction).WithMany(b => b.WF_Requests).HasForeignKey(c => c.WorkFlowActionId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Request_WorkFlowAction");
        }
    }

}
// </auto-generated>
