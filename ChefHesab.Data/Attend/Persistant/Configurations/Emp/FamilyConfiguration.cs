// <auto-generated>
// ReSharper disable All

using Ksc.HR.Domain.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace Ksc.Hr.Data.Persistant.Configurations
{
    // DependenceJob
    public class FamilyConfiguration : IEntityTypeConfiguration<Family>
    {
        public void Configure(EntityTypeBuilder<Family> builder)
        {
            builder.ToTable("Family", "Emp");
            builder.HasKey(x => x.Id).HasName("PK_Family").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeId").HasColumnType("int").IsRequired();
            builder.Property(x => x.SequenceNumber).HasColumnName(@"SequenceNumber").HasColumnType("int").IsRequired();
            builder.Property(x => x.NationalCode).HasColumnName(@"NationalCode").HasColumnType("nvarchar(20)").IsRequired().HasMaxLength(20);
            builder.Property(x => x.FirstName).HasColumnName(@"FirstName").HasColumnType("nvarchar(500)").IsRequired().HasMaxLength(500);
            builder.Property(x => x.LastName).HasColumnName(@"LastName").HasColumnType("nvarchar(500)").IsRequired().HasMaxLength(500);
            builder.Property(x => x.GenderId).HasColumnName(@"GenderId").HasColumnType("int").IsRequired();
            builder.Property(x => x.DependenceTypeId).HasColumnName(@"DependenceTypeId").HasColumnType("int").IsRequired();
            builder.Property(x => x.IsContinuesDependent).HasColumnName(@"IsContinuesDependent").HasColumnType("bit").IsRequired();
            builder.Property(x => x.BirthDate).HasColumnName(@"BirthDate").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.BirthCityId).HasColumnName(@"BirthCityId").HasColumnType("int").IsRequired();
            builder.Property(x => x.CertificateNumber).HasColumnName(@"CertificateNumber").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.CertificateDate).HasColumnName(@"CertificateDate").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.CertificateCityId).HasColumnName(@"CertificateCityId").HasColumnType("int").IsRequired();
            builder.Property(x => x.NationalityId).HasColumnName(@"NationalityId").HasColumnType("int").IsRequired();
            builder.Property(x => x.DependenceJobId).HasColumnName(@"DependenceJobId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.DependenceReasonId).HasColumnName(@"DependenceReasonId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.DependentExitDateReasonId).HasColumnName(@"DependentExitDateReasonId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.StartDateDependent).HasColumnName(@"StartDateDependent").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.EndDateDependent).HasColumnName(@"EndDateDependent").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.IsCompleteInsurance).HasColumnName(@"IsCompleteInsurance").HasColumnType("bit").IsRequired();
            builder.Property(x => x.ValidDateInsurance).HasColumnName(@"ValidDateInsurance").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.InsertDate).HasColumnName(@"InsertDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.InsertUser).HasColumnName(@"InsertUser").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.UpdateDate).HasColumnName(@"UpdateDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.UpdateUser).HasColumnName(@"UpdateUser").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType("bit").IsRequired();

            //// Foreign keys
            builder.HasOne(a => a.BirthCity).WithMany(b => b.Families_BirthCityId).HasForeignKey(c => c.BirthCityId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Family_City");
            builder.HasOne(a => a.CertificateCity).WithMany(b => b.Families_CertificateCityId).HasForeignKey(c => c.CertificateCityId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Family_City1");
            //builder.HasOne(a => a.Employee).WithMany(b => b.Families).HasForeignKey(c => c.EmployeeId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Family_Employee");
            builder.HasOne(a => a.DependenceJob).WithMany(b => b.Families).HasForeignKey(c => c.DependenceJobId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Family_DependenceJob");
            builder.HasOne(a => a.DependenceReason).WithMany(b => b.Families).HasForeignKey(c => c.DependenceReasonId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Family_DependenceReason");
            builder.HasOne(a => a.DependenceType).WithMany(b => b.Families).HasForeignKey(c => c.DependenceTypeId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Family_DependenceType");
            builder.HasOne(a => a.DependentExitDateReason).WithMany(b => b.Families).HasForeignKey(c => c.DependentExitDateReasonId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Family_DependentExitDateReason");
            builder.HasOne(a => a.Gender).WithMany(b => b.Families).HasForeignKey(c => c.GenderId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Family_Gender");
            builder.HasOne(a => a.Nationality).WithMany(b => b.Families).HasForeignKey(c => c.NationalityId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Family_Nationality");
        }
    }

}
// </auto-generated>
