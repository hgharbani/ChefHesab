// <auto-generated>
// ReSharper disable All

using Ksc.HR.Domain.Entities.Emp;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace Ksc.Hr.Data.Persistant.Configurations.Emp
{
    // EmployeeBlackList
    public class EmployeeBlackListConfiguration : IEntityTypeConfiguration<EmployeeBlackList>
    {
        public void Configure(EntityTypeBuilder<EmployeeBlackList> builder)
        {
            builder.ToTable("EmployeeBlackList", "Emp");
            builder.HasKey(x => x.Id).HasName("PK_EmployeeBlackList").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeId").HasColumnType("int").IsRequired();
            builder.Property(x => x.OtherPaymentTypeId).HasColumnName(@"OtherPaymentTypeId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.StartDate).HasColumnName(@"StartDate").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType("bit").IsRequired(true);
            builder.Property(x => x.InsertUser).HasColumnName(@"InsertUser").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.InsertDate).HasColumnName(@"InsertDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.RemoteIpAddress).HasColumnName(@"RemoteIpAddress").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.AuthenticateUserName).HasColumnName(@"AuthenticateUserName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);

            // Foreign keys
            builder.HasOne(a => a.Employee).WithMany(b => b.EmployeeBlackLists).HasForeignKey(c => c.EmployeeId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_EmployeeBlackList_Employee");
            builder.HasOne(a => a.OtherPaymentType).WithMany(b => b.EmployeeBlackLists).HasForeignKey(c => c.OtherPaymentTypeId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_EmployeeBlackList_OtherPaymentType");
        }
    }

}
// </auto-generated>
