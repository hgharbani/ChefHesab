// <auto-generated>
// ReSharper disable All

using Ksc.HR.Domain.Entities.Rule;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace Ksc.HR.Data.Persistant.Configurations
{
    // InterdictType
    public class InterdictWeatherConfiguration : IEntityTypeConfiguration<InterdictWeather>
    {
        public void Configure(EntityTypeBuilder<InterdictWeather> builder)
        {
            builder.ToTable("InterdictWeather", "Rule");
            builder.HasKey(x => x.Id).HasName("PK_InterdictWeather").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.WorkCityId).HasColumnName(@"WorkCityId").HasColumnType("int").IsRequired();
            builder.Property(x => x.JobCategoryDefinationId).HasColumnName(@"JobCategoryDefinationId").HasColumnType("int").IsRequired();
            builder.Property(x => x.StartDate).HasColumnName(@"StartDate").HasColumnType("int").IsRequired();
            builder.Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("int").IsRequired();
            builder.Property(x => x.Value).HasColumnName(@"Value").HasColumnType("decimal(3,2)").HasPrecision(3, 2).IsRequired();
            builder.Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType("bit").IsRequired();
            builder.Property(x => x.InsertDate).HasColumnName(@"InsertDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.InsertUser).HasColumnName(@"InsertUser").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.UpdateDate).HasColumnName(@"UpdateDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.UpdateUser).HasColumnName(@"UpdateUser").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);

            // Foreign keys
            builder.HasOne(a => a.Chart_JobCategoryDefination).WithMany(b => b.InterdictWeathers).HasForeignKey(c => c.JobCategoryDefinationId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_InterdictWeather_JobCategoryDefination");
            builder.HasOne(a => a.WorkCity).WithMany(b => b.InterdictWeathers).HasForeignKey(c => c.WorkCityId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_InterdictWeather_WorkCity");
        }
    }

}
// </auto-generated>
