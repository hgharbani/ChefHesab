// <auto-generated>
// ReSharper disable All

using Ksc.HR.Domain.Entities.Rule;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace testhr
{
    // IncreaseSalaryDetail
    public class IncreaseSalaryDetailConfiguration : IEntityTypeConfiguration<IncreaseSalaryDetail>
    {
        public void Configure(EntityTypeBuilder<IncreaseSalaryDetail> builder)
        {
            builder.ToTable("IncreaseSalaryDetail", "Rule");
            builder.HasKey(x => x.Id).HasName("PK_IncreasedSalaryDetail").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.IncreasedSalaryHeaderId).HasColumnName(@"IncreasedSalaryHeaderId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.EmploymentTypeId).HasColumnName(@"EmploymentTypeId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.EmployeeInterdictId).HasColumnName(@"EmployeeInterdictId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.JobCategoryDefinationId).HasColumnName(@"JobCategoryDefinationId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.JobGroupId).HasColumnName(@"JobGroupId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.MaritalStatusId).HasColumnName(@"MaritalStatusId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.MarriedDate).HasColumnName(@"MarriedDate").HasColumnType("date").IsRequired(false);
            builder.Property(x => x.NumberOfChild).HasColumnName(@"NumberOfChild").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.WorkCityId).HasColumnName(@"WorkCityId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.MeritPercent).HasColumnName(@"MeritPercent").HasColumnType("decimal(18,3)").HasPrecision(18, 3).IsRequired(false);
            builder.Property(x => x.BasijPercent).HasColumnName(@"BasijPercent").HasColumnType("decimal(18,3)").HasPrecision(18, 3).IsRequired(false);
            builder.Property(x => x.AmountJobPosition).HasColumnName(@"AmountJobPosition").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.AmountCalculate).HasColumnName(@"AmountCalculate").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.CalculateDay).HasColumnName(@"CalculateDay").HasColumnType("int").IsRequired(false);

            // Foreign keys
            //builder.HasOne(a => a.Employee).WithMany(b => b.IncreaseSalaryDetails).HasForeignKey(c => c.EmployeeId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_IncreasedSalaryDetail_Employee");
            builder.HasOne(a => a.MaritalStatus).WithMany(b => b.IncreaseSalaryDetails).HasForeignKey(c => c.MaritalStatusId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_IncreasedSalaryDetail_MaritalStatus");
            builder.HasOne(a => a.EmploymentType).WithMany(b => b.IncreaseSalaryDetails).HasForeignKey(c => c.EmploymentTypeId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_IncreasedSalaryDetail_EmploymentType");
            builder.HasOne(a => a.Rule_EmployeeInterdict).WithMany(b => b.IncreaseSalaryDetails).HasForeignKey(c => c.EmployeeInterdictId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_IncreasedSalaryDetail_EmployeeInterdict");
            builder.HasOne(a => a.Rule_IncreaseSalaryHeader).WithMany(b => b.IncreaseSalaryDetails).HasForeignKey(c => c.IncreasedSalaryHeaderId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_IncreaseSalaryDetail_IncreaseSalaryHeader");
            builder.HasOne(a => a.WorkCity).WithMany(b => b.IncreaseSalaryDetails).HasForeignKey(c => c.WorkCityId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_IncreasedSalaryDetail_WorkCity");
        }
    }

}
// </auto-generated>
