// <auto-generated>
// ReSharper disable All

using Ksc.HR.Domain.Entities.Rule;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace Ksc.HR.Data.Persistant.Configurations
{
    // EmployeeInterdict
    public class EmployeeInterdictConfiguration : IEntityTypeConfiguration<EmployeeInterdict>
    {
        public void Configure(EntityTypeBuilder<EmployeeInterdict> builder)
        {
            builder.ToTable("EmployeeInterdict", "Rule");
            builder.HasKey(x => x.Id).HasName("PK_EmployeeInterdict").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.InterdictTypeId).HasColumnName(@"InterdictTypeId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ExecuteDate).HasColumnName(@"ExecuteDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.IssuanceDate).HasColumnName(@"IssuanceDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.InterdictNumber).HasColumnName(@"InterdictNumber").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.EmploymentTypeId).HasColumnName(@"EmploymentTypeId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.InterdictStartDate).HasColumnName(@"InterdictStartDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.InterdictEndDate).HasColumnName(@"InterdictEndDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.CurrentJobGroupId).HasColumnName(@"CurrentJobGroupId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.JobPositionId).HasColumnName(@"JobPositionId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.SupervisionScore).HasColumnName(@"SupervisionScore").HasColumnType("float").HasPrecision(53).IsRequired(false);
            builder.Property(x => x.SpecialLiabilityScore).HasColumnName(@"SpecialLiabilityScore").HasColumnType("float").HasPrecision(53).IsRequired(false);
            builder.Property(x => x.HardWorkScore).HasColumnName(@"HardWorkScore").HasColumnType("float").HasPrecision(53).IsRequired(false);
            builder.Property(x => x.RadiationPercentage).HasColumnName(@"RadiationPercentage").HasColumnType("float").HasPrecision(53).IsRequired(false);
            builder.Property(x => x.MeritPercentage).HasColumnName(@"MeritPercentage").HasColumnType("float").HasPrecision(53).IsRequired(false);
            builder.Property(x => x.BasijPercentage).HasColumnName(@"BasijPercentage").HasColumnType("float").HasPrecision(53).IsRequired(false);
            builder.Property(x => x.InterdictDescriptionId).HasColumnName(@"InterdictDescriptionId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.SignatureImageId).HasColumnName(@"SignatureImageId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ReasonJobMovingId).HasColumnName(@"ReasonJobMovingId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.SumPriceBasisSalary).HasColumnName(@"SumPriceBasisSalary").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.SumPriceIndependentBasisSalary).HasColumnName(@"SumPriceIndependentBasisSalary").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.InterdictStatusId).HasColumnName(@"InterdictStatusId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.InsertDate).HasColumnName(@"InsertDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.InsertUser).HasColumnName(@"InsertUser").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.UpdateDate).HasColumnName(@"UpdateDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.UpdateUser).HasColumnName(@"UpdateUser").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.PortalFinalConfirmFlag).HasColumnName(@"PortalFinalConfirmFlag").HasColumnType("bit").IsRequired(false);

            builder.Property(x => x.SendMISDate).HasColumnName(@"SendMISDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.SendMISYearMonth).HasColumnName(@"SendMISYearMonth").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.IsCollective).HasColumnName(@"IsCollective").HasColumnType("bit").IsRequired(false);


            // Foreign keys
            builder.HasOne(a => a.CurrentJobGroup).WithMany(b => b.EmployeeInterdicts).HasForeignKey(c => c.CurrentJobGroupId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_EmployeeInterdict_JobGroupCurrent");
            builder.HasOne(a => a.Chart_JobPosition).WithMany(b => b.EmployeeInterdicts).HasForeignKey(c => c.JobPositionId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_EmployeeInterdict_JobPosition");
            builder.HasOne(a => a.Employee).WithMany(b => b.EmployeeInterdicts).HasForeignKey(c => c.EmployeeId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_EmployeeInterdict_Employee");
            builder.HasOne(a => a.EmployeeBase_EmploymentType).WithMany(b => b.EmployeeInterdicts).HasForeignKey(c => c.EmploymentTypeId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_EmployeeInterdict_EmploymentType");
            builder.HasOne(a => a.InterdictDescription).WithMany(b => b.EmployeeInterdicts).HasForeignKey(c => c.InterdictDescriptionId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_EmployeeInterdict_InterdictDescription");
            builder.HasOne(a => a.InterdictStatus).WithMany(b => b.EmployeeInterdicts).HasForeignKey(c => c.InterdictStatusId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_EmployeeInterdict_InterdictStatus1");
            builder.HasOne(a => a.InterdictType).WithMany(b => b.EmployeeInterdicts).HasForeignKey(c => c.InterdictTypeId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_EmployeeInterdict_InterdictType");

        }
    }

}
// </auto-generated>
