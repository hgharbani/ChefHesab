// <auto-generated>
// ReSharper disable All

using Ksc.HR.Domain.Entities.Rule;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace Ksc.Hr.Data.Persistant.Configurations
{
    // EmployeePromotion
    public class EmployeePromotionConfiguration : IEntityTypeConfiguration<EmployeePromotion>
    {
        public void Configure(EntityTypeBuilder<EmployeePromotion> builder)
        {
            builder.ToTable("EmployeePromotion", "Rule");
            builder.HasKey(x => x.Id).HasName("PK_EmployeePromotion").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeId").HasColumnType("int").IsRequired(false);
            //builder.Property(x => x.LastInterdictId).HasColumnName(@"LastInterdictId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CalculateDate).HasColumnName(@"CalculateDate").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.TotalHistory).HasColumnName(@"TotalHistory").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PerformanceRate).HasColumnName(@"PerformanceRate").HasColumnType("float").HasPrecision(53).IsRequired(false);
            builder.Property(x => x.TrainingScore).HasColumnName(@"TrainingScore").HasColumnType("float").HasPrecision(53).IsRequired(false);
            //builder.Property(x => x.TrainingScore).HasColumnName(@"TrainingScore").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.CurrentJobGroupId).HasColumnName(@"CurrentJobGroupId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.NewJobGroupId).HasColumnName(@"NewJobGroupId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.JobPositionId).HasColumnName(@"JobPositionId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.EmployeeEducationDegreeId).HasColumnName(@"EmployeeEducationDegreeId").HasColumnType("int").IsRequired(false);
            //builder.Property(x => x.JobPositionFieldId).HasColumnName(@"JobPositionFieldId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.DegreeBalanceRate).HasColumnName(@"DegreeBalanceRate").HasColumnType("float").HasPrecision(53).IsRequired(false);
            builder.Property(x => x.PromotionStatusId).HasColumnName(@"PromotionStatusId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PromotionDate).HasColumnName(@"PromotionDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.PromotionDateYearMonth).HasColumnName(@"PromotionDateYearMonth").HasColumnType("int").IsRequired(false);

            
            builder.Property(x => x.TrainingHour).HasColumnName(@"TrainingHour").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.KizenScore).HasColumnName(@"KizenScore").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PromotionRejectReasonId).HasColumnName(@"PromotionRejectReasonId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.WfRequestId).HasColumnName(@"WFRequestId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.InsertDate).HasColumnName(@"InsertDate").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.InsertUser).HasColumnName(@"InsertUser").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.UpdateUser).HasColumnName(@"UpdateUser").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.UpdateDate).HasColumnName(@"UpdateDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType("bit").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.Chart_JobPosition).WithMany(b => b.EmployeePromotions).HasForeignKey(c => c.JobPositionId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_EmployeePromotion_JobPosition");
            //builder.HasOne(a => a.Chart_JobPositionField).WithMany(b => b.EmployeePromotions).HasForeignKey(c => c.JobPositionFieldId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_EmployeePromotion_JobPositionField");
            builder.HasOne(a => a.CurrentJobGroup).WithMany(b => b.EmployeePromotions_CurrentJobGroupId).HasForeignKey(c => c.CurrentJobGroupId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_EmployeePromotion_JobGroupCurrent");
            builder.HasOne(a => a.EmployeeEducationDegree).WithMany(b => b.EmployeePromotions).HasForeignKey(c => c.EmployeeEducationDegreeId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_EmployeePromotion_EmployeeEducationDegree");
            builder.HasOne(a => a.Employee).WithMany(b => b.EmployeePromotions).HasForeignKey(c => c.EmployeeId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_EmployeePromotion_Employee");
            builder.HasOne(a => a.NewJobGroup).WithMany(b => b.EmployeePromotions_NewJobGroupId).HasForeignKey(c => c.NewJobGroupId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_EmployeePromotion_JobGroupNew");
            builder.HasOne(a => a.PromotionRejectReason).WithMany(b => b.EmployeePromotions).HasForeignKey(c => c.PromotionRejectReasonId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_EmployeePromotion_PromotionRejectReason");
            builder.HasOne(a => a.PromotionStatus).WithMany(b => b.EmployeePromotions).HasForeignKey(c => c.PromotionStatusId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_EmployeePromotion_PromotionStatus");
            builder.HasOne(a => a.WF_Request).WithMany(b => b.EmployeePromotions).HasForeignKey(c => c.WfRequestId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_EmployeePromotion_Request");
            //builder.HasOne(a => a.LastInterdict).WithMany(b => b.EmployeePromotions).HasForeignKey(c => c.LastInterdictId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_EmployeePromotion_LastInterdict");

        }
    }

}
// </auto-generated>
