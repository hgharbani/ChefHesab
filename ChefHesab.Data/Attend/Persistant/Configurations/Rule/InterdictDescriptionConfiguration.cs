// <auto-generated>
// ReSharper disable All

using Ksc.HR.Domain.Entities.Rule;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace Ksc.HR.Data.Persistant.Configurations
{
    // InterdictDescription
    public class InterdictDescriptionConfiguration : IEntityTypeConfiguration<InterdictDescription>
    {
        public void Configure(EntityTypeBuilder<InterdictDescription> builder)
        {
            builder.ToTable("InterdictDescription", "Rule");
            builder.HasKey(x => x.Id).HasName("PK_RuleDescription").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.InterdictTypeId).HasColumnName(@"InterdictTypeId").HasColumnType("int").IsRequired();
            builder.Property(x => x.StartDate).HasColumnName(@"StartDate").HasColumnType("int").IsRequired();
            builder.Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("int").IsRequired();
            builder.Property(x => x.Title).HasColumnName(@"Title").HasColumnType("nvarchar(150)").IsRequired(false);
            builder.Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.DescriptionPrint).HasColumnName(@"DescriptionPrint").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType("bit").IsRequired();
            builder.Property(x => x.InsertDate).HasColumnName(@"InsertDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.InsertUser).HasColumnName(@"InsertUser").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.UpdateDate).HasColumnName(@"UpdateDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.UpdateUser).HasColumnName(@"UpdateUser").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);

            // Foreign keys
            builder.HasOne(a => a.InterdictType).WithMany(b => b.InterdictDescriptions).HasForeignKey(c => c.InterdictTypeId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_InterdictDescription_InterdictType");
        }
    }

}
// </auto-generated>
