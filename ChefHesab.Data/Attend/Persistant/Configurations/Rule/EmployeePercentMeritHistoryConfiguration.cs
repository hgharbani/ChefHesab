// <auto-generated>
// ReSharper disable All

using Ksc.HR.Domain.Entities.Rule;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace Ksc.Hr.Data.Persistant.Configurations
{
    // EmployeePercentMeritHistory
    public class EmployeePercentMeritHistoryConfiguration : IEntityTypeConfiguration<EmployeePercentMeritHistory>
    {
        public void Configure(EntityTypeBuilder<EmployeePercentMeritHistory> builder)
        {
            builder.ToTable("EmployeePercentMeritHistory", "Rule");
            builder.HasKey(x => x.Id).HasName("PK_MeritCoefficientRecord").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.MeritPercent).HasColumnName(@"MeritPercent").HasColumnType("float").HasPrecision(53).IsRequired(false);
            builder.Property(x => x.MeritRatingId).HasColumnName(@"MeritRatingId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Year).HasColumnName(@"Year").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.InsertDate).HasColumnName(@"InsertDate").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.InsertUser).HasColumnName(@"InsertUser").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.UpdateDate).HasColumnName(@"UpdateDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.UpdateUser).HasColumnName(@"UpdateUser").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType("bit").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.Employee).WithMany(b => b.EmployeePercentMeritHistories).HasForeignKey(c => c.EmployeeId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_EmployeePercentMeritHistory_Employee");
            builder.HasOne(a => a.MeritRating).WithMany(b => b.EmployeePercentMeritHistories).HasForeignKey(c => c.MeritRatingId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_EmployeePercentMeritHistory_MeritRating");
        }
    }

}
// </auto-generated>
