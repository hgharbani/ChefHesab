// <auto-generated>
// ReSharper disable All

using Ksc.HR.Domain.Entities.Rule;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace testhr
{
    // InterdictMaritalSettingDetail
    public class InterdictMaritalSettingDetailConfiguration : IEntityTypeConfiguration<InterdictMaritalSettingDetail>
    {
        public void Configure(EntityTypeBuilder<InterdictMaritalSettingDetail> builder)
        {
            builder.ToTable("InterdictMaritalSettingDetail", "Rule");
            builder.HasKey(x => x.Id).HasName("PK_MaritalAccountEmploymentTypeDetail").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.InterdictMaritalSettingId).HasColumnName(@"InterdictMaritalSettingId").HasColumnType("int").IsRequired();
            builder.Property(x => x.AccountCodeId).HasColumnName(@"AccountCodeId").HasColumnType("int").IsRequired();
            builder.Property(x => x.MaritalStatusId).HasColumnName(@"MaritalStatusId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Amount).HasColumnName(@"Amount").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.InsertDate).HasColumnName(@"InsertDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.InsertUser).HasColumnName(@"InsertUser").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.UpdateDate).HasColumnName(@"UpdateDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.UpdateUser).HasColumnName(@"UpdateUser").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);

            // Foreign keys
            builder.HasOne(a => a.MaritalStatus).WithMany(b => b.InterdictMaritalSettingDetails).HasForeignKey(c => c.MaritalStatusId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_InterdictMaritalSettingDetail_MaritalStatus");
            builder.HasOne(a => a.InterdictMaritalSetting).WithMany(b => b.InterdictMaritalSettingDetails).HasForeignKey(c => c.InterdictMaritalSettingId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_InterdictMaritalSettingDetail_InterdictMaritalSetting");
            builder.HasOne(a => a.AccountCode).WithMany(b => b.InterdictMaritalSettingDetails).HasForeignKey(c => c.AccountCodeId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_InterdictMaritalSettingDetail_AccountCode");
        }
    }

}
// </auto-generated>
