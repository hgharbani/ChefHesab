// <auto-generated>
// ReSharper disable All
using Ksc.HR.Domain.Entities.Personal;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;


namespace Ksc.HR.Data.Persistant.Configurations
{
    // EmployeeAttendAbsenceItem
    public class EmployeeAttendAbsenceItemConfiguration : IEntityTypeConfiguration<EmployeeAttendAbsenceItem>
    {
        public void Configure(EntityTypeBuilder<EmployeeAttendAbsenceItem> builder)
        {
            builder.ToTable(tbl=>tbl.HasTrigger("[dbo].[ChangeTimeToMinute]([TimeDuration])"));
            builder.ToTable("EmployeeAttendAbsenceItem", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_EmployeeDailyTimeSheet").IsClustered();
            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("bigint").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeId").HasColumnType("int").IsRequired();
            builder.Property(x => x.StartDate).HasColumnName(@"StartDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.WorkCalendarId).HasColumnName(@"WorkCalendarId").HasColumnType("int").IsRequired();
            builder.Property(x => x.StartTime).HasColumnName(@"StartTime").HasColumnType("char(5)").IsRequired().IsFixedLength().IsUnicode(false).HasMaxLength(5);
            builder.Property(x => x.EndTime).HasColumnName(@"EndTime").HasColumnType("char(5)").IsRequired().IsFixedLength().IsUnicode(false).HasMaxLength(5);
            builder.Property(x => x.TimeDuration).HasColumnName(@"TimeDuration").HasColumnType("char(5)").IsRequired().IsFixedLength().IsUnicode(false).HasMaxLength(5);
            builder.Property(x => x.EmployeeLongTermAbsenceId).HasColumnName(@"EmployeeLongTermAbsenceId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.RollCallDefinitionId).HasColumnName(@"RollCallDefinitionId").HasColumnType("int").IsRequired();
            builder.Property(x => x.ShiftConceptDetailId).HasColumnName(@"ShiftConceptDetailId").HasColumnType("int").IsRequired();
            builder.Property(x => x.ShiftConceptDetailIdInShiftBoard).HasColumnName(@"ShiftConceptDetailIdInShiftBoard").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.WorkTimeId).HasColumnName(@"WorkTimeId").HasColumnType("int").IsRequired();
            builder.Property(x => x.IsManual).HasColumnName(@"IsManual").HasColumnType("bit").IsRequired();
            builder.Property(x => x.IsFloat).HasColumnName(@"IsFloat").HasColumnType("bit").IsRequired();
            builder.Property(x => x.InvalidRecord).HasColumnName(@"InvalidRecord").HasColumnType("bit").IsRequired();
            builder.Property(x => x.InvalidRecordReason).HasColumnName(@"InvalidRecordReason").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.InsertDate).HasColumnName(@"InsertDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.InsertUser).HasColumnName(@"InsertUser").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.UpdateDate).HasColumnName(@"UpdateDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.UpdateUser).HasColumnName(@"UpdateUser").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.RowVersion).HasColumnName(@"RowVersion").HasColumnType("timestamp(8)").IsRequired().IsFixedLength().HasMaxLength(8).IsRowVersion().IsConcurrencyToken();
            builder.Property(x => x.MissionId).HasColumnName(@"MissionId").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);

            builder.Property(x => x.EvaluationDevelopmentId).HasColumnName(@"EvaluationDevelopmentId").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);

            builder.Property(x => x.EmployeeEducationTimeId).HasColumnName(@"EmployeeEducationTimeId").HasColumnType("int").IsRequired(false);
            //builder.Property(x => x.TimeDurationInMinute).HasColumnName(@"TimeDurationInMinute").HasColumnType("int").IsRequired(false).ValueGeneratedOnAddOrUpdate();
            builder.Property(x => x.TimeDurationInMinute).HasComputedColumnSql("[dbo].[ChangeTimeToMinute]([TimeDuration])");
            builder.Property(x => x.OverTimeToken).HasColumnName(@"OverTimeToken").HasColumnType("varchar(max)").IsRequired(false).IsUnicode(false);
            builder.Property(x => x.IncreasedTimeDuration).HasColumnName(@"IncreasedTimeDuration").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.RemoteIpAddress).HasColumnName(@"RemoteIpAddress").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.MissionRequestId).HasColumnName(@"MissionRequestId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.AuthenticateUserName).HasColumnName(@"AuthenticateUserName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            // Foreign keys
            builder.HasOne(a => a.Employee).WithMany(b => b.EmployeeAttendAbsenceItems).HasForeignKey(c => c.EmployeeId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_EmployeeAttendAbsenceItem_Employee");
            builder.HasOne(a => a.EmployeeLongTermAbsence).WithMany(b => b.EmployeeAttendAbsenceItems).HasForeignKey(c => c.EmployeeLongTermAbsenceId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_EmployeeAttendAbsenceItem_EmployeeLongTermAbsence");
            builder.HasOne(a => a.Mission_Request).WithMany(b => b.EmployeeAttendAbsenceItems).HasForeignKey(c => c.MissionRequestId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_EmployeeAttendAbsenceItem_Request");
            builder.HasOne(a => a.RollCallDefinition).WithMany(b => b.EmployeeAttendAbsenceItems).HasForeignKey(c => c.RollCallDefinitionId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_EmployeeAttendAbsenceItem_RollCallDefinition");
            builder.HasOne(a => a.ShiftConceptDetail_ShiftConceptDetailId).WithMany(b => b.EmployeeAttendAbsenceItems_ShiftConceptDetailId).HasForeignKey(c => c.ShiftConceptDetailId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_EmployeeAttendAbsenceItem_ShiftConceptDetail");
            builder.HasOne(a => a.ShiftConceptDetail_ShiftConceptDetailIdInShiftBoard).WithMany(b => b.EmployeeAttendAbsenceItems_ShiftConceptDetailIdInShiftBoard).HasForeignKey(c => c.ShiftConceptDetailIdInShiftBoard).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_EmployeeAttendAbsenceItem_ShiftConceptDetailFromShiftBoard");
            builder.HasOne(a => a.WorkCalendar).WithMany(b => b.EmployeeAttendAbsenceItems).HasForeignKey(c => c.WorkCalendarId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_EmployeeAttendAbsenceItem_WorkCalendar");
            builder.HasOne(a => a.WorkTime).WithMany(b => b.EmployeeAttendAbsenceItems).HasForeignKey(c => c.WorkTimeId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_EmployeeAttendAbsenceItem_WorkTime");
            builder.HasOne(a => a.EmployeeEducationTime).WithMany(b => b.EmployeeAttendAbsenceItems).HasForeignKey(c => c.EmployeeEducationTimeId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_EmployeeAttendAbsenceItem_EmployeeEducationTime");

        }
    }

}
// </auto-generated>
