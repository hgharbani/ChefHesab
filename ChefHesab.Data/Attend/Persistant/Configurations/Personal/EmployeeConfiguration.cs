// <auto-generated>
// ReSharper disable All

using Ksc.HR.Domain.Entities.Personal;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;


namespace Ksc.HR.Data.Persistant.Configurations
{
    // Employee
    public class EmployeeConfiguration : IEntityTypeConfiguration<Employee>
    {
        public void Configure(EntityTypeBuilder<Employee> builder)
        {
            builder.ToTable("Employee", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_Employee").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.EmployeeNumber).HasColumnName(@"EmployeeNumber").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar(500)").IsRequired().HasMaxLength(500);
            builder.Property(x => x.Family).HasColumnName(@"Family").HasColumnType("nvarchar(500)").IsRequired().HasMaxLength(500);
            builder.Property(x => x.Gender).HasColumnName(@"Gender").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.MaritalStatusId).HasColumnName(@"MaritalStatusId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.TeamWorkId).HasColumnName(@"TeamWorkId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.WorkGroupId).HasColumnName(@"WorkGroupId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PersonalTypeId).HasColumnName(@"PersonalTypeId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.JobPositionCode).HasColumnName(@"JobPositionCode").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.JobPositionStartDate).HasColumnName(@"JobPositionStartDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.JobPositionId).HasColumnName(@"JobPositionId").HasColumnType("int").IsRequired(false);


            builder.Property(x => x.TeamWorkStartDate).HasColumnName(@"TeamWorkStartDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.WorkGroupStartDate).HasColumnName(@"WorkGroupStartDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.BreastfeddingStartDate).HasColumnName(@"BreastfeddingStartDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.BreastfeddingEndDate).HasColumnName(@"BreastfeddingEndDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.IsBreastfeddingInStartShift).HasColumnName(@"IsBreastfeddingInStartShift").HasColumnType("bit").IsRequired();
            builder.Property(x => x.RemianingVacationInMinute).HasColumnName(@"RemianingVacationInMinute").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.WorkCityId).HasColumnName(@"WorkCityId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.EmploymentTypeId).HasColumnName(@"EmploymentTypeId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.SacrificeOptionSettingId).HasColumnName(@"SacrificeOptionSettingId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.SacrificePercentage).HasColumnName(@"SacrificePercentage").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PaymentStatusId).HasColumnName(@"PaymentStatusId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.DismissalDate).HasColumnName(@"DismissalDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.DismissalStatusId).HasColumnName(@"DismissalStatusId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.EntryExitTypeId).HasColumnName(@"EntryExitTypeId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.IsValidUnVaccine).HasColumnName(@"IsValidUnVaccine").HasColumnType("bit").IsRequired();
            builder.Property(x => x.UnVaccineValidDate).HasColumnName(@"UnVaccineValidDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.VaccineDosage).HasColumnName(@"VaccineDosage").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.EmploymentDate).HasColumnName(@"EmploymentDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.NationalCode).HasColumnName(@"NationalCode").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.FloatTimeSettingId).HasColumnName(@"FloatTimeSettingId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Efficiency).HasColumnName(@"Efficiency").HasColumnType("decimal(3,2)").HasPrecision(3, 2).IsRequired(false);
            builder.Property(x => x.MissionCountPerYear).HasColumnName(@"MissionCountPerYear").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PhoneNumber).HasColumnName(@"PhoneNumber").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.PreiveName).HasColumnName(@"PreiveName").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.PreiveFamily).HasColumnName(@"PreiveFamily").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.FatherName).HasColumnName(@"FatherName").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.BirthDate).HasColumnName(@"BirthDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.BirthCityId).HasColumnName(@"BirthCityId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CertificateNumber).HasColumnName(@"CertificateNumber").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.CertificateDate).HasColumnName(@"CertificateDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.CertificateCityId).HasColumnName(@"CertificateCityId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.NationalityId).HasColumnName(@"NationalityId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.RegionId).HasColumnName(@"RegionId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.BloodTypeId).HasColumnName(@"BloodTypeId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.MarriedDate).HasColumnName(@"MarriedDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.MilitaryStatusId).HasColumnName(@"MilitaryStatusId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.MilitaryStartDate).HasColumnName(@"MilitaryStartDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.MilitaryEndDate).HasColumnName(@"MilitaryEndDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.InsuranceNumber).HasColumnName(@"InsuranceNumber").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.InsuranceListId).HasColumnName(@"InsuranceListId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.NumberOfChildren).HasColumnName(@"NumberOfChildren").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.NumberOfDependents).HasColumnName(@"NumberOfDependents").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.HomeCityId).HasColumnName(@"HomeCityId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.HomeAddress).HasColumnName(@"HomeAddress").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.HomeZipCode).HasColumnName(@"HomeZipCode").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.EmploymentStatusId).HasColumnName(@"EmploymentStatusId").HasColumnType("int").IsRequired(false);

            builder.Property(x => x.ContractStartDate).HasColumnName(@"ContractStartDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.ContractEndDate).HasColumnName(@"ContractEndDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.HasFloatTime).HasColumnName(@"HasFloatTime").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.IsGenerated).HasColumnName(@"IsGenerated").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.SavingTypeId).HasColumnName(@"SavingTypeId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.SavingTypeDate).HasColumnName(@"SavingTypeDate").HasColumnType("int").IsRequired(false);

            builder.Property(x => x.InsertDate).HasColumnName(@"InsertDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.InsertUser).HasColumnName(@"InsertUser").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.RemoteIpAddress).HasColumnName(@"RemoteIpAddress").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.AuthenticateUserName).HasColumnName(@"AuthenticateUserName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.UpdateDate).HasColumnName(@"UpdateDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.UpdateUser).HasColumnName(@"UpdateUser").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
          
            builder.Property(x => x.IsarStatusId).HasColumnName(@"IsarStatusId").HasColumnType("int").IsRequired(false);

            
            builder.Property(x => x.GuidPicId).HasColumnName(@"GuidPicId").HasColumnType("nvarchar(Max)").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.UVPercent).HasColumnName(@"UVPercent").HasColumnType("float").HasPrecision(53).IsRequired(false);
            builder.Property(x => x.ProductionEfficiencyId).HasColumnName(@"ProductionEfficiencyId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.JobGroupId).HasColumnName(@"JobGroupId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.MissionYearMis).HasColumnName(@"MissionYearMis").HasColumnType("int").IsRequired(false);


            // Foreign keys
            builder.HasOne(a => a.BirthCity).WithMany(b => b.Employees).HasForeignKey(c => c.BirthCityId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Employee_City2");
            builder.HasOne(a => a.CertificateCity).WithMany(b => b.Employees_CertificateCityId).HasForeignKey(c => c.CertificateCityId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Employee_City1");
            builder.HasOne(a => a.Dismissal_Status).WithMany(b => b.Employees).HasForeignKey(c => c.DismissalStatusId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Employee_Status");
            builder.HasOne(a => a.BloodType).WithMany(b => b.Employees).HasForeignKey(c => c.BloodTypeId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Employee_BloodType");
            builder.HasOne(a => a.EmploymentStatus).WithMany(b => b.Employees).HasForeignKey(c => c.EmploymentStatusId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Employee_EmploymentStatus");
            builder.HasOne(a => a.EmploymentType).WithMany(b => b.Employees).HasForeignKey(c => c.EmploymentTypeId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Employee_EmploymentType");
            builder.HasOne(a => a.GenderType).WithMany(b => b.Employees).HasForeignKey(c => c.Gender).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Employee_GenderType");

            builder.HasOne(a => a.InsuranceList).WithMany(b => b.Employees).HasForeignKey(c => c.InsuranceListId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Employee_InsuranceList");

            builder.HasOne(a => a.MilitaryStatus).WithMany(b => b.Employees).HasForeignKey(c => c.MilitaryStatusId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Employee_MilitaryStatus");
            builder.HasOne(a => a.Nationality).WithMany(b => b.Employees).HasForeignKey(c => c.NationalityId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Employee_Nationality");
            builder.HasOne(a => a.Region).WithMany(b => b.Employees).HasForeignKey(c => c.RegionId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Employee_Region");
            builder.HasOne(a => a.EntryExitType).WithMany(b => b.Employees).HasForeignKey(c => c.EntryExitTypeId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Employee_EntryExitType");
            builder.HasOne(a => a.FloatTimeSetting).WithMany(b => b.Employees).HasForeignKey(c => c.FloatTimeSettingId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Employee_FloatTimeSetting");
            builder.HasOne(a => a.HomeCity).WithMany(b => b.Employees_HomeCityId).HasForeignKey(c => c.HomeCityId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Employee_City");
            builder.HasOne(a => a.MaritalStatus).WithMany(b => b.Employees).HasForeignKey(c => c.MaritalStatusId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Employee_MaritalStatus");
            builder.HasOne(a => a.PaymentStatus).WithMany(b => b.Employees).HasForeignKey(c => c.PaymentStatusId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Employee_PaymentStatus");
            builder.HasOne(a => a.SacrificeOptionSetting).WithMany(b => b.Employees).HasForeignKey(c => c.SacrificeOptionSettingId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Employee_SacrificeOptionSetting");
            builder.HasOne(a => a.PersonalType).WithMany(b => b.Employees).HasForeignKey(c => c.PersonalTypeId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Employee_PersonalType");

            builder.HasOne(a => a.TeamWork).WithMany(b => b.Employees).HasForeignKey(c => c.TeamWorkId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Employee_TeamWork");
            builder.HasOne(a => a.WorkCity).WithMany(b => b.Employees).HasForeignKey(c => c.WorkCityId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Employee_WorkCity");
            builder.HasOne(a => a.WorkGroup).WithMany(b => b.Employees).HasForeignKey(c => c.WorkGroupId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Employee_WorkGroup");
            builder.HasOne(a => a.SavingType).WithMany(b => b.Employees).HasForeignKey(c => c.SavingTypeId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Employee_SavingType");
            builder.HasOne(a => a.IsarStatus).WithMany(b => b.Employees).HasForeignKey(c => c.IsarStatusId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Employee_IsarStatus");
            builder.Property(x => x.CategoryCoefficientId).HasColumnName(@"CategoryCoefficientId").HasColumnType("int").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.Chart_JobGroup).WithMany(b => b.Employees).HasForeignKey(c => c.JobGroupId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Employee_JobGroup");
            builder.HasOne(a => a.Chart_ProductionEfficiency).WithMany(b => b.Employees).HasForeignKey(c => c.ProductionEfficiencyId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Employee_ProductionEfficiency");
            builder.HasOne(a => a.Chart_CategoryCoefficient).WithMany(b => b.Employees).HasForeignKey(c => c.CategoryCoefficientId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Employee_CategoryCoefficient");

            // builder.HasIndex(x => new { x.TeamWorkId, x.WorkGroupId, x.PaymentStatusId }).HasDatabaseName("_dta_index_Employee_17_343008303__K5_K6_K17_1_2_3_4_7_8_9_10_11_12_13_14_15_16_18_19_20_21_22_23_24_25");
            // builder.HasIndex(x => x.EmployeeNumber).HasDatabaseName("Hr_Pmd_0");
        }
    }

}
// </auto-generated>
