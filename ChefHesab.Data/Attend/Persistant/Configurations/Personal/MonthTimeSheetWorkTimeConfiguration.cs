// <auto-generated>
// ReSharper disable All

using Ksc.HR.Domain.Entities.Personal;
using Ksc.HR.Domain.Entities.Workshift;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace Ksc.HR.Data.Persistant.Configurations
{
    // MonthTimeSheetWorkTime
    public class MonthTimeSheetWorkTimeConfiguration : IEntityTypeConfiguration<MonthTimeSheetWorkTime>
    {
        public void Configure(EntityTypeBuilder<MonthTimeSheetWorkTime> builder)
        {
            builder.ToTable("MonthTimeSheetWorkTime", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_MonthTimeSheetWorkTime").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("bigint").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.MonthTimeSheetId).HasColumnName(@"MonthTimeSheetId").HasColumnType("int").IsRequired();
            builder.Property(x => x.WorkTimeId).HasColumnName(@"WorkTimeId").HasColumnType("int").IsRequired();
            builder.Property(x => x.DayCount).HasColumnName(@"DayCount").HasColumnType("int").IsRequired();
            builder.Property(x => x.ShiftBenefitInMinute).HasColumnName(@"ShiftBenefitInMinute").HasColumnType("int").IsRequired();
            builder.Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType("bit").IsRequired();
            builder.Property(x => x.InsertDate).HasColumnName(@"InsertDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.InsertUser).HasColumnName(@"InsertUser").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.UpdateDate).HasColumnName(@"UpdateDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.UpdateUser).HasColumnName(@"UpdateUser").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);

            // Foreign keys
            builder.HasOne(a => a.MonthTimeSheet).WithMany(b => b.MonthTimeSheetWorkTimes).HasForeignKey(c => c.MonthTimeSheetId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_MonthTimeSheetWorkTime_MonthTimeSheet");
            builder.HasOne(a => a.WorkTime).WithMany(b => b.MonthTimeSheetWorkTimes).HasForeignKey(c => c.WorkTimeId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_MonthTimeSheetWorkTime_WorkTime");
        }
    }

}
// </auto-generated>
