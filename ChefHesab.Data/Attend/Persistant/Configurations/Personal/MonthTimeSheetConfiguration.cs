// <auto-generated>
// ReSharper disable All

using Ksc.HR.Domain.Entities.Personal;
using Ksc.HR.Domain.Entities.Workshift;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace Ksc.HR.Data.Persistant.Configurations
{
    // MonthTimeSheet
    public class MonthTimeSheetConfiguration : IEntityTypeConfiguration<MonthTimeSheet>
    {
        public void Configure(EntityTypeBuilder<MonthTimeSheet> builder)
        {
            builder.ToTable("MonthTimeSheet", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_MonthTimeSheet").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeId").HasColumnType("int").IsRequired();
            builder.Property(x => x.YearMonth).HasColumnName(@"YearMonth").HasColumnType("int").IsRequired();
            builder.Property(x => x.PaymentStatusId).HasColumnName(@"PaymentStatusId").HasColumnType("int").IsRequired();
            builder.Property(x => x.WorkGroupId).HasColumnName(@"WorkGroupId").HasColumnType("int").IsRequired();
            builder.Property(x => x.ExcessOverTime).HasColumnName(@"ExcessOverTime").HasColumnType("char(6)").IsRequired(false).IsFixedLength().IsUnicode(false).HasMaxLength(6);
            builder.Property(x => x.SumInvalidOverTimInDailyTimeSheet).HasColumnName(@"SumInvalidOverTimInDailyTimeSheet").HasColumnType("char(6)").IsRequired(false).IsFixedLength().IsUnicode(false).HasMaxLength(6);
            builder.Property(x => x.AverageBalanceOverTime).HasColumnName(@"AverageBalanceOverTime").HasColumnType("char(6)").IsRequired(false).IsFixedLength().IsUnicode(false).HasMaxLength(6);
            builder.Property(x => x.ExcessOverTimeOld).HasColumnName(@"ExcessOverTimeOld").HasColumnType("char(6)").IsRequired(false).IsFixedLength().IsUnicode(false).HasMaxLength(6);
            builder.Property(x => x.UsedVacationCurrentMonth).HasColumnName(@"UsedVacationCurrentMonth").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.CurrentMonthMerit).HasColumnName(@"CurrentMonthMerit").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.InsertDate).HasColumnName(@"InsertDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.InsertUser).HasColumnName(@"InsertUser").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.UpdateDate).HasColumnName(@"UpdateDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.UpdateUser).HasColumnName(@"UpdateUser").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(t => t.IsCreatedManual).HasColumnName("IsCreatedManual");
            // Foreign keys
            builder.HasOne(a => a.Employee).WithMany(b => b.MonthTimeSheets).HasForeignKey(c => c.EmployeeId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_MonthTimeSheet_Employee");
            builder.HasOne(a => a.PaymentStatus).WithMany(b => b.MonthTimeSheets).HasForeignKey(c => c.PaymentStatusId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_MonthTimeSheet_PaymentStatus");
            builder.HasOne(a => a.WorkGroup).WithMany(b => b.MonthTimeSheets).HasForeignKey(c => c.WorkGroupId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_MonthTimeSheet_WorkGroup");
        }
    }

}
// </auto-generated>
