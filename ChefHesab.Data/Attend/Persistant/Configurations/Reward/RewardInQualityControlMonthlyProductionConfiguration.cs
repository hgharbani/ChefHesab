// <auto-generated>
// ReSharper disable All

using Ksc.HR.Domain.Entities.Reward;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace Ksc.HR.Data.Persistant.Configurations
{
    // RewardInQualityControlMonthlyProduction
    public class RewardInQualityControlMonthlyProductionConfiguration : IEntityTypeConfiguration<RewardInQualityControlMonthlyProduction>
    {
        public void Configure(EntityTypeBuilder<RewardInQualityControlMonthlyProduction> builder)
        {
            builder.ToTable("RewardInQualityControlMonthlyProduction", "Reward");
            builder.HasKey(x => x.Id).HasName("PK_RewardInQualityControlMonthlyProduction").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.RewardInId).HasColumnName(@"RewardInId").HasColumnType("int").IsRequired();
            builder.Property(x => x.QualityControlProductionWeghit).HasColumnName(@"QualityControlProductionWeghit").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.AooWeight).HasColumnName(@"AooWeight").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.SabadWeight).HasColumnName(@"SabadWeight").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.OkWeight).HasColumnName(@"OkWeight").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.NotOkWeight).HasColumnName(@"NotOkWeight").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.BloomIncreasedWeight).HasColumnName(@"BloomIncreasedWeight").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.InRewWeight).HasColumnName(@"InRewWeight").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.QualityFactory).HasColumnName(@"QualityFactory").HasColumnType("float").HasPrecision(53).IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.RewardIn).WithMany(b => b.RewardInQualityControlMonthlyProductions).HasForeignKey(c => c.RewardInId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_RewardInQualityControlMonthlyProduction_RewardIn");
        }
    }

}
// </auto-generated>
