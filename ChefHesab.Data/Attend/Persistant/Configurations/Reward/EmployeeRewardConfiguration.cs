// <auto-generated>
// ReSharper disable All

using Ksc.HR.Domain.Entities.Reward;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace Ksc.HR.Data.Persistant.Configurations
{
    // EmployeeReward
    public class EmployeeRewardConfiguration : IEntityTypeConfiguration<EmployeeReward>
    {
        public void Configure(EntityTypeBuilder<EmployeeReward> builder)
        {
            builder.ToTable("EmployeeReward", "Reward");
            builder.HasKey(x => x.Id).HasName("PK_EmployeeReward").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("bigint").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.YearMonth).HasColumnName(@"YearMonth").HasColumnType("int").IsRequired();
            builder.Property(x => x.RewardCategoryId).HasColumnName(@"RewardCategoryId").HasColumnType("int").IsRequired();
            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeId").HasColumnType("int").IsRequired();
            builder.Property(x => x.JobPositionId).HasColumnName(@"JobPositionId").HasColumnType("int").IsRequired();
            builder.Property(x => x.CofficientProximityProduct).HasColumnName(@"CofficientProximityProduct").HasColumnType("float").HasPrecision(53).IsRequired(false);
            builder.Property(x => x.CoefficientJobCategory).HasColumnName(@"CoefficientJobCategory").HasColumnType("float").HasPrecision(53).IsRequired(false);
            builder.Property(x => x.ProductionEfficiencyId).HasColumnName(@"ProductionEfficiencyId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.IncreasedPercentConverted).HasColumnName(@"IncreasedPercentConverted").HasColumnType("float").HasPrecision(53).IsRequired(false);
            builder.Property(x => x.IncreasedPercent).HasColumnName(@"IncreasedPercent").HasColumnType("float").HasPrecision(53).IsRequired();
            builder.Property(x => x.EfficiencyPerson).HasColumnName(@"EfficiencyPerson").HasColumnType("float").HasPrecision(53).IsRequired(false);
            builder.Property(x => x.InsuranceDurationInDay).HasColumnName(@"InsuranceDurationInDay").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.HourlyDeductionReward).HasColumnName(@"HourlyDeductionReward").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.DailyDeductionReward).HasColumnName(@"DailyDeductionReward").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.RewardSpecificId).HasColumnName(@"RewardSpecificId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.RewardSpecificEfficiency).HasColumnName(@"RewardSpecificEfficiency").HasColumnType("decimal(18, 3)").HasPrecision(18, 3).IsRequired(false);
            builder.Property(x => x.CalculatedRewardPrice).HasColumnName(@"CalculatedRewardPrice").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.DeductionRewardPrice).HasColumnName(@"DeductionRewardPrice").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.PaymentRewardPrice).HasColumnName(@"PaymentRewardPrice").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.CofficientSafety).HasColumnName(@"CofficientSafety").HasColumnType("float").HasPrecision(53).IsRequired(false);
            builder.Property(x => x.CofficientDeductionPrice).HasColumnName(@"CofficientDeductionPrice").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.InsertUser).HasColumnName(@"InsertUser").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.InsertDate).HasColumnName(@"InsertDate").HasColumnType("datetime").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.Chart_JobPosition).WithMany(b => b.EmployeeRewards).HasForeignKey(c => c.JobPositionId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_EmployeeReward_JobPosition");
            builder.HasOne(a => a.Employee).WithMany(b => b.EmployeeRewards).HasForeignKey(c => c.EmployeeId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_EmployeeReward_Employee");
            builder.HasOne(a => a.Reward_RewardCategory).WithMany(b => b.EmployeeRewards).HasForeignKey(c => c.RewardCategoryId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_EmployeeReward_RewardCategory");
        }
    }

}
// </auto-generated>
