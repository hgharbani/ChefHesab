// <auto-generated>
// ReSharper disable All

using Ksc.HR.Domain.Entities.Reward;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace Ksc.HR.Data.Persistant.Configurations
{
    // RewardOutDetail
    public class RewardOutDetailConfiguration : IEntityTypeConfiguration<RewardOutDetail>
    {
        public void Configure(EntityTypeBuilder<RewardOutDetail> builder)
        {
            builder.ToTable("RewardOutDetail", "Reward");
            builder.HasKey(x => x.Id).HasName("PK_RewardOutDetail").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.RewardOutHeaderId).HasColumnName(@"RewardOutHeaderId").HasColumnType("int").IsRequired();
            builder.Property(x => x.RewardUnitTypeId).HasColumnName(@"RewardUnitTypeId").HasColumnType("int").IsRequired(false);

            builder.Property(x => x.SequenceNumber).HasColumnName(@"SequenceNumber").HasColumnType("int").IsRequired();
            builder.Property(x => x.TPercent).HasColumnName(@"TPercent").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.ActualProductionPerTon).HasColumnName(@"ActualProductionPerTon").HasColumnType("float").HasPrecision(53).IsRequired(false);
            builder.Property(x => x.PlanProductionPerTon).HasColumnName(@"PlanProductionPerTon").HasColumnType("float").HasPrecision(53).IsRequired(false);
            builder.Property(x => x.PlanRelizationPercent).HasColumnName(@"PlanRelizationPercent").HasColumnType("float").HasPrecision(53).IsRequired(false);
            builder.Property(x => x.MonthlyBase).HasColumnName(@"MonthlyBase").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.DailyBase).HasColumnName(@"DailyBase").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.CPercent).HasColumnName(@"CPercent").HasColumnType("float").HasPrecision(53).IsRequired(false);
            builder.Property(x => x.PaymentAmount).HasColumnName(@"PaymentAmount").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.FinalPaymentAmount).HasColumnName(@"FinalPaymentAmount").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.ProductionEfficiencyId).HasColumnName(@"ProductionEfficiencyId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.RewardSpecificPercent).HasColumnName(@"RewardSpecificPercent").HasColumnType("float").HasPrecision(53).IsRequired(false);
            builder.Property(x => x.PaymentAmountKpi).HasColumnName(@"PaymentAmountKPI").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.TotalPersonPerJob).HasColumnName(@"TotalPersonPerJob").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.TotalPercentPerJob).HasColumnName(@"TotalPercentPerJob").HasColumnType("float").IsRequired(false);
            builder.Property(x => x.UpdateDate).HasColumnName(@"UpdateDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.UpdateUser).HasColumnName(@"UpdateUser").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.IsFinal).HasColumnName(@"IsFinal").HasColumnType("bit").IsRequired(false);
            // Foreign keys
            builder.HasOne(a => a.RewardOutHeader).WithMany(b => b.RewardOutDetails).HasForeignKey(c => c.RewardOutHeaderId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_RewardOutDetail_RewardOutHeader");
            builder.HasOne(a => a.RewardUnitType).WithMany(b => b.RewardOutDetails).HasForeignKey(c => c.RewardUnitTypeId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_RewardOutDetail_RewardUnitType");


        }
    }

}
// </auto-generated>
