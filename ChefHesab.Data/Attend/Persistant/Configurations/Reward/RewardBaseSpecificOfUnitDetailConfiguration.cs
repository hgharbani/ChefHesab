// <auto-generated>
// ReSharper disable All

using Ksc.HR.Domain.Entities.Reward;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace Ksc.HR.Data.Persistant.Configurations

{
    // RewardBaseSpecificOfUnitDetail
    public class RewardBaseSpecificOfUnitDetailConfiguration : IEntityTypeConfiguration<RewardBaseSpecificOfUnitDetail>
    {
        public void Configure(EntityTypeBuilder<RewardBaseSpecificOfUnitDetail> builder)
        {
            builder.ToTable("RewardBaseSpecificOfUnitDetail", "Reward");
            builder.HasKey(x => x.Id).HasName("PK_RewardBaseSpecificUnitDetail").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.RewardBaseSpecificUnitHeaderId).HasColumnName(@"RewardBaseSpecificUnitHeaderId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.MinimumOfUnit).HasColumnName(@"MinimumOfUnit").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.MaximumOfUnit).HasColumnName(@"MaximumOfUnit").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.BaseAmount).HasColumnName(@"BaseAmount").HasColumnType("float").HasPrecision(53).IsRequired(false);
            //builder.Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType("bit").IsRequired();
            //builder.Property(x => x.IsMonthly).HasColumnName(@"IsMonthly").HasColumnType("bit").IsRequired();
            //builder.Property(x => x.ValidDate).HasColumnName(@"ValidDate").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.InsertDate).HasColumnName(@"InsertDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.InsertUser).HasColumnName(@"InsertUser").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);

            // Foreign keys
            builder.HasOne(a => a.RewardBaseSpecificOfUnitHeader).WithMany(b => b.RewardBaseSpecificOfUnitDetails).HasForeignKey(c => c.RewardBaseSpecificUnitHeaderId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_RewardBaseSpecificOfUnitDetail_RewardBaseSpecificOfUnitHeader");
        }
    }

}
// </auto-generated>
