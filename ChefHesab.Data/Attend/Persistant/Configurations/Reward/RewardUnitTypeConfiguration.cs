// <auto-generated>
// ReSharper disable All

using Ksc.HR.Domain.Entities.Reward;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace Ksc.HR.Data.Persistant.Configurations
{
    // RewardUnitType
    public class RewardUnitTypeConfiguration : IEntityTypeConfiguration<RewardUnitType>
    {
        public void Configure(EntityTypeBuilder<RewardUnitType> builder)
        {
            builder.ToTable("RewardUnitType", "Reward");
            builder.HasKey(x => x.Id).HasName("PK_RewardUnitType").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.Title).HasColumnName(@"Title").HasColumnType("nvarchar(20)").IsRequired().HasMaxLength(20);
            builder.Property(x => x.CountingUnitId).HasColumnName(@"CountingUnitId").HasColumnType("int").IsRequired();
            builder.Property(x => x.IsBaseData).HasColumnName(@"IsBaseData").HasColumnType("bit").IsRequired();
            builder.Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType("bit").IsRequired();
            builder.Property(x => x.InsertUser).HasColumnName(@"InsertUser").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.InsertDate).HasColumnName(@"InsertDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.UpdateUser).HasColumnName(@"UpdateUser").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.UpdateDate).HasColumnName(@"UpdateDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.RewardCategoryId).HasColumnName(@"RewardCategoryId").HasColumnType("int").IsRequired();


            // Foreign keys
            builder.HasOne(a => a.CountingUnit).WithMany(b => b.RewardUnitTypes).HasForeignKey(c => c.CountingUnitId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_RewardUnitType_CountingUnit");
            builder.HasOne(a => a.RewardCategory).WithMany(b => b.RewardUnitTypes).HasForeignKey(c => c.RewardCategoryId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_RewardUnitType_RewardCategory");

        }
    }

}
// </auto-generated>
