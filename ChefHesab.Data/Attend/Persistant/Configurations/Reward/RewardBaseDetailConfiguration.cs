// <auto-generated>
// ReSharper disable All

using Ksc.HR.Domain.Entities.Reward;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace Ksc.HR.Data.Persistant.Configurations
{
    // RewardBaseDetail
    public class RewardBaseDetailConfiguration : IEntityTypeConfiguration<RewardBaseDetail>
    {
        public void Configure(EntityTypeBuilder<RewardBaseDetail> builder)
        {
            builder.ToTable("RewardBaseDetail", "Reward");
            builder.HasKey(x => x.Id).HasName("PK_RewardBaseDetail").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.RewardBaseHeaderId).HasColumnName(@"RewardBaseHeaderId").HasColumnType("int").IsRequired();
            builder.Property(x => x.RewardUnitTypeId).HasColumnName(@"RewardUnitTypeId").HasColumnType("int").IsRequired();
            builder.Property(x => x.MinimumOfUnit).HasColumnName(@"MinimumOfUnit").HasColumnType("int").IsRequired();
            builder.Property(x => x.MaximumOfUnit).HasColumnName(@"MaximumOfUnit").HasColumnType("int").IsRequired();
            builder.Property(x => x.MisKey).HasColumnName(@"MisKey").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.BaseAmount).HasColumnName(@"BaseAmount").HasColumnType("float").HasPrecision(53).IsRequired();
            builder.Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType("bit").IsRequired();
            builder.Property(x => x.IsAllBaseMonthlyProductionReward).HasColumnName(@"IsAllBaseMonthlyProductionReward").HasColumnType("bit").IsRequired();
            builder.Property(x => x.BaseMonthlyProductionReward).HasColumnName(@"BaseMonthlyProductionReward").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.FinalMonthlyProductionReward).HasColumnName(@"FinalMonthlyProductionReward").HasColumnType("bigint").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.RewardBaseHeader).WithMany(b => b.RewardBaseDetails).HasForeignKey(c => c.RewardBaseHeaderId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_RewardBaseDetail_RewardBaseHeader");
            builder.HasOne(a => a.RewardUnitType).WithMany(b => b.RewardBaseDetails).HasForeignKey(c => c.RewardUnitTypeId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_RewardBaseDetail_RewardUnitType");
        }
    }

}
// </auto-generated>
