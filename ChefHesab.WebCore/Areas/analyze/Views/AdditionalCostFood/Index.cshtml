@{
    Layout = null;
}
@Html.DalirWindow()
<style>
    .k-grid-cancel {
        background-color: lightgray !important;
        color: black !important;
    }

    .k-grid-update {
        border-color: #222222 !important;
        color: #ffffff !important;
        background-color: #0dc121 !important;
    }

    .k-grid-edit {
        border-color: #222222 !important;
        color: black !important;
        background-color: #ffc501 !important;
    }

    .k-tabstrip-items-wrapper .k-item.k-active, .k-tabstrip-items-wrapper .k-item.k-selected, .k-tabstrip-items-wrapper .k-item:active {
        border-color: #222222 !important;
        color: black !important;
        background-color: #ffc501 !important;
    }


    .k-tabstrip-top > .k-tabstrip-items-wrapper .k-item {
        border-color: #222222 !important;
        color: black !important;
        background-color: white;
    }
</style>
<form id="AdditionalCostFoodform" method="post" action="create" class="bg-white px-8 pt-6 pb-8 mb-4">
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)
    <div class="grid grid-cols-7 gap-4">

        <div class="col-span-5 mt-2 k-rtl">
            هزینه جانبی
            <select id="AdditionalCostFood" class="drodpwon w-full"></select>
        </div>

        <div class="col-span-1 mt-2 k-rtl" style="
    display: flex;
    align-self: flex-end;
    position: static;
    justify-items: end;
">

            <button type="button" id="btnCreateAdditionalCostFood"
                    class="ms-1 inline-block
                        rounded bg-blue-500 px-4
                        pb-2 pt-2.5 text-xs
                        font-medium uppercase
                        leading-normal
                        text-white
                        hover:bg-primary-accent-300
                        hover:shadow-primary-2">
                <i class="fa fa-plus"></i>
            </button>
        </div>
        <div class="col-span-7 mt-2 k-rtl" id="AdditionalCostFoodGrid">
        </div>
    </div>
</form>
<script>

    var additionalCostGrid;
    $(document).ready(function (event) {

        RenderAdditionalCostFood()
        RenderAdditionalCostFoodGrid()
        $("#btnCreateAdditionalCostFood").click(function (e) {
            e.preventDefault();
            var item = {
                AdditionalCostId: $("#AdditionalCostFood").data("kendoComboBox").value(),
                FoodProviderId: $("#Id").val(),
            }
            $.PostMvcDataAjax({
                baseEvent: e,
                postUrl: '/analyze/AdditionalCostFood/create',
                loginUrl: '/login',
                data: item,
                beforePostHandler: function () {


                },
                completeHandler: function (data) {
                    refreshIngredinsFoodGrid()
                    refreshAdditionalCostFoodGrid()
                },
                errorHandler: function () {

                }
            });





        })
    });

    function getDataAdditionalCostFood() {
        return {
            CompanyId: $("#ContractCompanyId").val(),


        }
    }
    function RenderAdditionalCostFood() {
        $("#AdditionalCostFood").kendoComboBox({
            dataSource: {
                transport: {
                    read: {
                        url: "/Define/AdditionalCost/GetAllByKendoFilter",
                        type: "POST",
                        dataType: "json",
                        contentType: "application/json",
                        data: getDataAdditionalCostFood
                    },
                    update: {
                        url: "/Define/FoodStuff/UpdateStuff",
                        dataType: "jsonp",

                    },
                    parameterMap: function (data, operation) {
                        if (operation != "read") {
                            return data;
                        } else {
                            return JSON.stringify(data);
                        }
                    }
                },
                pageSize: 20,
                autoSync: false,
                schema: {
                    data: "Data",
                    model: {
                        id: "Id",
                        fields: {
                            Id: { editable: false, nullable: false },
                            Title: { type: "string", editable: false },
                            CompanyTitle: { type: "string", editable: false },
                            Price: { type: "number", editable: false },
                            IsShowRatio: { type: "boolean" },

                        }
                    }
                },
                sortable: {
                    mode: "multiple",
                    allowUnsort: true
                },
                sort: [
                    {
                        field: "Title",
                        dir: "asc"
                    }
                ]
            },
            onchange: function (e) {

            },
            dataTextField: "Title",
            dataValueField: "Id",
            filter: "contains",
            suggest: true,
            template: "#=Title# - مبلغ: #=Price#"

        });
    }
    function getFilterAdditionalCostFood() {

        return {

            FoodProviderId: $("#Id").val()
        }
    }
    function RenderAdditionalCostFoodGrid() {
        var recordIngredins = 0;

        $("#AdditionalCostFoodGrid").kendoGrid({
            autoBind: true,

            dataSource: {
                transport: {
                    read: {
                        url: "/analyze/AdditionalCostFood/GetAllByKendoFilter",
                        type: "POST",
                        dataType: "json",
                        contentType: "application/json",
                        data: getFilterAdditionalCostFood
                    },

                    parameterMap: function (data, operation) {
                        if (operation != "read") {
                            return data;
                        } else {
                            return JSON.stringify(data);
                        }
                    }
                },
                pageSize: 20,
                autoSync: true,
                schema: {
                    data: "Data",
                    model: {
                        id: "Id",
                        fields: {
                            Id: { editable: false, nullable: true },
                            Title: { type: "string", editable: false },


                            Price: { type: "number", editable: false },
                            Cost: { type: "string", editable: false },


                        }
                    }
                }
            },
            columnMenu: {
                filterable: true
            },

            editable: false,
            dataBinding: function () {
                recordIngredins = (this.dataSource.page() - 1) * this.dataSource.pageSize();
            },
            dataBound: function (e) {
                
                var dataGrid = this.dataItems()
                totalPriceOnePorsFood()
            },
            pageable: {
                pageSizes: [10, 25, 50, 100],
                refresh: true,
                messages: {
                    display: "{0} تا {1} از {2} رکورد",
                    //{0} is the index of the first record on the page, {1} - index of the last record on the page, {2} is the total amount of records
                    empty: "رکوردی برای نمایش وجود ندارد.",
                    page: "صفحه",
                    of: "از {0}", //{0} is total amount of pages
                    itemsPerPage: "رکورد در صفحه",
                    first: "صفحه نخست",
                    previous: "صفحه قبل",
                    next: "صفحه بعد",
                    last: "صفحه آخر",
                    refresh: "دوباره سازی"
                }
            },
            sortable: true,
            navigatable: true,
            resizable: true,
            reorderable: true,
            height: 400,
            filterable: true,
            scrollable: true,
            columns: [

                {
                    field: "Id",
                    title: "عملیات",
                    width: 100,
                    template: function (e) {
                        var btn = `
                                                          <button type="button"
                                                                 class="ms-1 inline-block
                                                                 rounded bg-red-500 px-4
                                                                 pb-2 pt-2.5 text-xs
                                                                 font-medium uppercase
                                                                 leading-normal
                                                                 text-white
                                                                 transition
                                                                 duration-150
                                                                 ease-in-out
                                                                 hover:bg-primary-accent-300
                                                                 hover:shadow-primary-2
                                                                "

                                                                         onclick="deleteAdditionalCostFood('${e.Id}')"

                                                                 >
                                                             <i class="fa fa-trash"></i>
                                                        </button>

                                                                        `
                        return btn;
                    },
                    attributes: {
                        style: "text-align: center;"
                    },
                }, {
                    field: "Title",
                    title: "هزینه جانبی",

                    attributes: {
                        style: "text-align: center;"
                    },
                },
                {
                    field: "Cost",
                    title: "قیمت نهایی",
                    attributes: {
                        style: "text-align: center;"
                    },
                },
            ],
        });

    }
    function refreshAdditionalCostFoodGrid() {
        $("#AdditionalCostFoodGrid").data("kendoGrid").dataSource.read();
    }

    function deleteAdditionalCostFood(id) {
        debugger;
        Swal.fire({
            title: "با حذف این مورد تمام اطلاعات آن حذف میشود",

            showCancelButton: true,
            confirmButtonText: "حذف کن !",
            cancelButtonText: `انصراف`
        }).then((result, e) => {
            /* Read more about isConfirmed, isDenied below */
            if (result.isConfirmed) {
                var item = {
                    Id: id,
                    FoodProviderId: $("#Id").val()
                }
                $.PostMvcDataAjax({
                    baseEvent: event,
                    postUrl: '/analyze/AdditionalCostFood/Delete',
                    loginUrl: '/login',
                    data: item,
                    beforePostHandler: function () {


                    },
                    completeHandler: function (data) {
                        refreshIngredinsFoodGrid()
                        refreshAdditionalCostFoodGrid()

                    },
                    errorHandler: function () {

                    }
                });


            }
        });
    }

</script>
