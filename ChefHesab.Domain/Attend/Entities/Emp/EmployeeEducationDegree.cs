// <auto-generated>
// ReSharper disable All

using Ksc.HR.Domain.Entities.Chart;
using Ksc.HR.Domain.Entities.Personal;
using Ksc.HR.Domain.Entities.Rule;
using Ksc.HR.Domain.Entities.Transfer;
using KSC.Domain;
using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;

namespace Ksc.HR.Domain.Entities.Emp
{
    // EmployeeEducationDegree
    /// <summary>
    /// مدرک تحصیلی پرسنل
    /// </summary>
    public class EmployeeEducationDegree : IEntityBase<int>
    {
        /// <summary>
        /// کلید اصلی
        /// </summary>
        public int Id { get; set; } // Id (Primary key)

        /// <summary>
        /// شماره پرسنلی
        /// </summary>
        public int EmployeeId { get; set; } // EmployeeId

        /// <summary>
        /// مدرک تحصیلی
        /// </summary>
        public int EducationId { get; set; } // EducationId

        /// <summary>
        /// رشته تحصیلی
        /// </summary>
        public int StudyFieldId { get; set; } // StudyFieldId

        /// <summary>
        /// تاریخ اخذ مدرک تحصیلی
        /// </summary>
        public DateTime? EducationDate { get; set; } // EducationDate

        /// <summary>
        /// تاریخ درج
        /// </summary>
        public DateTime InsertDate { get; set; } // InsertDate

        /// <summary>
        /// کاربر درج کننده
        /// </summary>
        public string InsertUser { get; set; } // InsertUser (length: 50)

        /// <summary>
        /// تاریخ ویرایش
        /// </summary>
        public DateTime? UpdateDate { get; set; } // UpdateDate

        /// <summary>
        /// کاربر ویرایش کننده
        /// </summary>
        public string UpdateUser { get; set; } // UpdateUser (length: 50)

        /// <summary>
        /// فعال؟
        /// </summary>
        public bool IsActive { get; set; } // IsActive

        // Foreign keys

        /// <summary>
        /// Parent Education pointed by [EmployeeEducationDegree].([EducationId]) (FK_EmployeeEducationDegree_Education)
        /// </summary>
        public virtual Education Education { get; set; } // FK_EmployeeEducationDegree_Education

        /// <summary>
        /// Parent Employee pointed by [EmployeeEducationDegree].([EmployeeId]) (FK_EmployeeEducationDegree_Employee)
        /// </summary>
        public virtual Employee Employee { get; set; } // FK_EmployeeEducationDegree_Employee

        /// <summary>
        /// Parent StudyField pointed by [EmployeeEducationDegree].([StudyFieldId]) (FK_EmployeeEducationDegree_StudyField)
        /// </summary>
        public virtual StudyField StudyField { get; set; } // FK_EmployeeEducationDegree_StudyField
        public virtual ICollection<EmployeePromotion> EmployeePromotions { get; set; } //

        /// <summary>
        /// Child Relocations where [Relocation].[EmployeeEducationDegreeId] point to this entity (FK_Relocation_EmployeeEducationDegree)
        /// </summary>
        public virtual ICollection<Relocation> Relocations { get; set; } // Relocation.FK_Relocation_EmployeeEducationDegree

        public EmployeeEducationDegree()
        {
            EmployeePromotions = new List<EmployeePromotion>();
            Relocations = new List<Relocation>();   
        }
    }
    
}
// </auto-generated>
