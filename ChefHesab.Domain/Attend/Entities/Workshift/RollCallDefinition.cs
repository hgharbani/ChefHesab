// <auto-generated>
// ReSharper disable All

using KSC.Domain;
using Ksc.HR.Domain.Entities.Oncall;
using Ksc.HR.Domain.Entities.Personal;
using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Ksc.HR.Domain.Entities.Emp;
using Ksc.HR.Domain.Entities.EmployeeBase;
using Ksc.Hr.Domain.Entities;

namespace Ksc.HR.Domain.Entities.Workshift
{
    // RollCallDefinition
    /// <summary>
    /// تعریف کدهای حضور غیاب
    /// </summary>
    public class RollCallDefinition : IEntityBase<int>
    {
        public int Id { get; set; } // Id (Primary key)

        /// <summary>
        /// عنوان
        /// </summary>
        public string Title { get; set; } // Title (length: 500)

        /// <summary>
        /// کد
        /// </summary>
        public string Code { get; set; } // Code (length: 50)

        /// <summary>
        /// تاریخ شروع اعتبار
        /// </summary>
        public DateTime? ValidityStartDate { get; set; } // ValidityStartDate

        /// <summary>
        /// تاریخ پایان اعتبار
        /// </summary>
        public DateTime? ValidityEndDate { get; set; } // ValidityEndDate

        /// <summary>
        /// حداقل زمان مجاز
        /// </summary>
        public string ValidityMinimumTime { get; set; } // ValidityMinimumTime (length: 5)

        /// <summary>
        /// حداکثر زمان مجاز
        /// </summary>
        public string ValidityMaximumTime { get; set; } // ValidityMaximumTime (length: 5)

        /// <summary>
        /// حداقل زمان مجاز به دقیقه
        /// </summary>
        public int? ValidityMinimumTimeMinute { get; set; } // ValidityMinimumTimeMinute

        /// <summary>
        /// حداکثر زمان مجاز به دقیقه
        /// </summary>
        public int? ValidityMaximumTimeMinute { get; set; } // ValidityMaximumTimeMinute

        /// <summary>
        /// قابل پذیرش در شروع شیفت
        /// </summary>
        public bool IsValidInShiftStart { get; set; } // IsValidInShiftStart

        /// <summary>
        /// قابل پذیرش در پایان شیفت
        /// </summary>
        public bool IsValidInShiftEnd { get; set; } // IsValidInShiftEnd
        public int RollCallConceptId { get; set; } // RollCallConceptId
        public int? RollCallCategoryId { get; set; } // RollCallCategoryId

        /// <summary>
        /// دفعات مجاز استفاده در روز
        /// </summary>
        public int? TimesAllowedUsePerDay { get; set; } // TimesAllowedUsePerDay

        /// <summary>
        /// دفعات مجاز استفاده در هفته
        /// </summary>
        public int? TimesAllowedUsePerWeek { get; set; } // TimesAllowedUsePerDay
        public int? GenderTypeId { get; set; } // GenderTypeId

        /// <summary>
        /// دفعات مجاز استفاده در ماه
        /// </summary>
        public int? TimesAllowedUsePerMonth { get; set; } // TimesAllowedUsePerMonth

        /// <summary>
        /// تعداد روزهای مجاز برای استفاده در یکسال
        /// </summary>
        public int? ValidityDayNumberInYear { get; set; } // ValidityDayNumberInYear

        /// <summary>
        /// برای تمام روزهای کاری در تمام زمان کاری قابل قبول است؟
        /// </summary>
        public bool IsValidForAllWorkTimeDayType { get; set; } // IsValidForAllWorkTimeDayType

        /// <summary>
        /// کد به صورت اتوماتیک در کارکرد ثبت میشود؟
        /// </summary>
        public bool InsertCodeIsAutomatic { get; set; } // InsertCodeIsAutomatic

        /// <summary>
        /// کد برای تمام نوع استخدام معتبر است؟
        /// </summary>
        public bool IsValidForAllEmploymentType { get; set; } // IsValidForAllEmploymentType

        /// <summary>
        /// ثبت کد توسط تمام رده های شغلی مجاز است؟
        /// </summary>
        public bool IsValidForAllCategoryCode { get; set; } // IsValidForAllCategoryCode

        /// <summary>
        /// نقش(سطح) دسترسی به کد
        /// </summary>
        public int? AccessLevelId { get; set; } // AccessLevelId

        /// <summary>
        /// آیا حذف تکی در تایید کارکرد می شود؟
        /// </summary>
        public bool IsValidSingleDelete { get; set; } // IsValidSingleDelete

        /// <summary>
        /// برای زمان موقت در ابتدای شیفت معتبر است؟
        /// </summary>
        public bool IsValidForTemporaryStartDate { get; set; } // IsValidForTemporaryStartDate

        /// <summary>
        /// برای زمان موقت در انتهای شیفت معتبر است؟
        /// </summary>
        public bool IsValidForTemporaryEndDate { get; set; } // IsValidForTemporaryEndDate
        public int? TrainingTypeId { get; set; } // TrainingTypeId

        /// <summary>
        /// محدوده تایم کاری
        /// </summary>
        public bool TrainingValidInShiftTime { get; set; } // TrainingValidInShiftTime

        /// <summary>
        /// خارج از تایم کاری
        /// </summary>
        public bool TrainingValidOutShiftTime { get; set; } // TrainingValidOutShiftTime

        /// <summary>
        /// معتبر برای کدهای عدم حضور روزانه در تایید کارکرد
        /// </summary>
        public bool IsValidForDailyAbcenseInAnalyz { get; set; } // IsValidForDailyAbcenseInAnalyz

        /// <summary>
        /// چک کردن واکسناسیون
        /// </summary>
        public bool VaccinationCheck { get; set; } // VaccinationCheck
        public bool LongTermAbsenceCheck { get; set; } //  LongTermAbsenceCheck

        public bool IsValidForDeleteAbsenceItem { get; set; }
        /// <summary>
        ///  ترتیب کسر از اضافه کاری
        /// </summary>
        public int? OverTimePriority { get; set; } // OverTimePriority
        public DateTime? InsertDate { get; set; } // InsertDate
        public string InsertUser { get; set; } // InsertUser (length: 50)
        public DateTime? UpdateDate { get; set; } // UpdateDate
        public string UpdateUser { get; set; } // UpdateUser (length: 50)
        public string DomainName { get; set; } // DomainName (length: 50)
        public bool IsActive { get; set; } // IsActive
        public byte[] RowVersion { get; set; } // RowVersion (length: 8)
        public int? IdTemp { get; set; } // IdTemp
                                         // Reverse navigation

        /// <summary>
        /// Child CompatibleRollCalls where [CompatibleRollCall].[CompatibleRollCallId] point to this entity (FK_CompatibleRollCall_RollCallDefinition1)
        /// </summary>
        public virtual ICollection<CompatibleRollCall> CompatibleRollCalls_CompatibleRollCallId { get; set; } // CompatibleRollCall.FK_CompatibleRollCall_RollCallDefinition1

        /// <summary>
        /// Child CompatibleRollCalls where [CompatibleRollCall].[RollCallDefinitionId] point to this entity (FK_CompatibleRollCall_RollCallDefinition)
        /// </summary>
        public virtual ICollection<CompatibleRollCall> CompatibleRollCalls_RollCallDefinitionId { get; set; } // CompatibleRollCall.FK_CompatibleRollCall_RollCallDefinition

        /// <summary>
        /// Child DayNightRollCalls where [DayNightRollCall].[RollCallDefinitionId] point to this entity (FK_DayNightRollCall_RollCallDefinition)
        /// </summary>
        public virtual ICollection<DayNightRollCall> DayNightRollCalls { get; set; } // DayNightRollCall.FK_DayNightRollCall_RollCallDefinition

        /// <summary>
        /// Child EmployeeAttendAbsenceItems where [EmployeeAttendAbsenceItem].[RollCallDefinitionId] point to this entity (FK_EmployeeAttendAbsenceItem_RollCallDefinition)
        /// </summary>
        public virtual ICollection<EmployeeAttendAbsenceItem> EmployeeAttendAbsenceItems { get; set; } // EmployeeAttendAbsenceItem.FK_EmployeeAttendAbsenceItem_RollCallDefinition

        /// <summary>
        /// Child EmployeeLongTermAbsences where [EmployeeLongTermAbsence].[RollCallDefinitionId] point to this entity (FK_EmployeeLongTermAbsence_RollCallDefinition)
        /// </summary>
        public virtual ICollection<EmployeeLongTermAbsence> EmployeeLongTermAbsences { get; set; } // EmployeeLongTermAbsence.FK_EmployeeLongTermAbsence_RollCallDefinition

        /// <summary>
        /// Child IncludedRollCalls where [IncludedRollCall].[RollCallDefinitionId] point to this entity (FK_IncludedRollCall_RollCallDefinition)
        /// </summary>
        public virtual ICollection<IncludedRollCall> IncludedRollCalls { get; set; } // IncludedRollCall.FK_IncludedRollCall_RollCallDefinition

        /// <summary>
        /// Child MonthTimeSheetRollCalls where [MonthTimeSheetRollCall].[RollCallDefinitionId] point to this entity (FK_MonthTimeSheetRollCall_RollCallDefinition)
        /// </summary>
        public virtual ICollection<MonthTimeSheetRollCall> MonthTimeSheetRollCalls { get; set; } // MonthTimeSheetRollCall.FK_MonthTimeSheetRollCall_RollCallDefinition

        /// <summary>
        /// Child OnCall_Types where [Type].[RollCallDefinitionId] point to this entity (FK_OnCallType_RollCallDefinition)
        /// </summary>
        public virtual ICollection<OnCall_Type> OnCall_Types { get; set; } // Type.FK_OnCallType_RollCallDefinition

        /// <summary>
        /// Child RollCallEmploymentTypes where [RollCallEmploymentType].[RollCallDefinitionId] point to this entity (FK_RollCallEmploymentType_RollCallDefinition)
        /// </summary>
        public virtual ICollection<RollCallEmploymentType> RollCallEmploymentTypes { get; set; } // RollCallEmploymentType.FK_RollCallEmploymentType_RollCallDefinition

        /// <summary>
        /// Child RollCallJobCategories where [RollCallJobCategory].[RollCallDefinitionId] point to this entity (FK_RollCallJobCategory_RollCallDefinition)
        /// </summary>
        public virtual ICollection<RollCallJobCategory> RollCallJobCategories { get; set; } // RollCallJobCategory.FK_RollCallJobCategory_RollCallDefinition

        /// <summary>
        /// Child RollCallSalaryCodes where [RollCallSalaryCode].[RollCallDefinitionId] point to this entity (FK_RollCallSalaryCode_RollCallDefinition)
        /// </summary>
        public virtual ICollection<RollCallSalaryCode> RollCallSalaryCodes { get; set; } // RollCallSalaryCode.FK_RollCallSalaryCode_RollCallDefinition

        /// <summary>
        /// Child RollCallWorkTimeDayTypes where [RollCallWorkTimeDayType].[RollCallDefinitionId] point to this entity (FK_RollCallWorkTimeDayType_RollCallDefinition)
        /// </summary>
        public virtual ICollection<RollCallWorkTimeDayType> RollCallWorkTimeDayTypes { get; set; } // RollCallWorkTimeDayType.FK_RollCallWorkTimeDayType_RollCallDefinition

        /// <summary>
        /// Child TimeShiftSettings where [TimeShiftSetting].[TemporaryRollCallDefinitionEndShift] point to this entity (FK_TimeShiftSetting_RollCallDefinition1)
        /// </summary>
        public virtual ICollection<TimeShiftSetting> TimeShiftSettings_TemporaryRollCallDefinitionEndShift { get; set; } // TimeShiftSetting.FK_TimeShiftSetting_RollCallDefinition1

        /// <summary>
        /// Child TimeShiftSettings where [TimeShiftSetting].[TemporaryRollCallDefinitionStartShift] point to this entity (FK_TimeShiftSetting_RollCallDefinition)
        /// </summary>
        public virtual ICollection<TimeShiftSetting> TimeShiftSettings_TemporaryRollCallDefinitionStartShift { get; set; } // TimeShiftSetting.FK_TimeShiftSetting_RollCallDefinition
        /// <summary>
        /// Child EmployeeBase_ConditionalAbsenceSubjectTypes where [ConditionalAbsenceSubjectType].[RollCallDefinitionId] point to this entity (FK_ConditionalAbsenceSubjectType_RollCallDefinition)
        /// </summary>
        public virtual ICollection<ConditionalAbsenceSubjectType> ConditionalAbsenceSubjectTypes { get; set; } // ConditionalAbsenceSubjectType.FK_ConditionalAbsenceSubjectType_RollCallDefinition

        // Foreign keys

        /// <summary>
        /// Parent AccessLevel pointed by [RollCallDefinition].([AccessLevelId]) (FK_RollCallDefinition_AccessLevel)
        /// </summary>
        public virtual AccessLevel AccessLevel { get; set; } // FK_RollCallDefinition_AccessLevel

        /// <summary>
        /// Parent RollCallCategory pointed by [RollCallDefinition].([RollCallCategoryId]) (FK_RollCallDefinition_RollCallCategory)
        /// </summary>
        public virtual RollCallCategory RollCallCategory { get; set; } // FK_RollCallDefinition_RollCallCategory

        /// <summary>
        /// Parent RollCallConcept pointed by [RollCallDefinition].([RollCallConceptId]) (FK_RollCallDefinition_RollCallConcept)
        /// </summary>
        public virtual RollCallConcept RollCallConcept { get; set; } // FK_RollCallDefinition_RollCallConcept

        /// <summary>
        /// Parent TrainingType pointed by [RollCallDefinition].([TrainingTypeId]) (FK_RollCallDefinition_TrainingType)
        /// </summary>
        public virtual TrainingType TrainingType { get; set; } // FK_RollCallDefinition_TrainingType
        /// <summary>
        /// Child TimeShiftSettings where [TimeShiftSetting].[OverTimeRollCallDefinitionEndShift] point to this entity (FK_TimeShiftSetting_RollCallDefinition3)
        /// </summary>
        public virtual ICollection<TimeShiftSetting> TimeShiftSettings_OverTimeRollCallDefinitionEndShift { get; set; } // TimeShiftSetting.FK_TimeShiftSetting_RollCallDefinition3

        /// <summary>
        /// Child TimeShiftSettings where [TimeShiftSetting].[OverTimeRollCallDefinitionStartShift] point to this entity (FK_TimeShiftSetting_RollCallDefinition2)
        /// </summary>
        public virtual ICollection<TimeShiftSetting> TimeShiftSettings_OverTimeRollCallDefinitionStartShift { get; set; } // TimeShiftSetting.FK_TimeShiftSetting_RollCallDefinition2
        public virtual ICollection<ConditionalAbsenceType> ConditionalAbsenceTypes { get; set; } // TimeShiftSetting.FK_TimeShiftSetting_RollCallDefinition2
        /// <summary>
        /// Child RollCallWorkTimeMonthSettings where [RollCallWorkTimeMonthSetting].[RollCallDefinitionId] point to this entity (FK_RollCallWorkTimeMonthSetting_RollCallDefinition)
        /// </summary>
        public virtual ICollection<RollCallWorkTimeMonthSetting> RollCallWorkTimeMonthSettings { get; set; } // RollCallWorkTimeMonthSetting.FK_RollCallWorkTimeMonthSetting_RollCallDefinition
        /// <summary>
        /// Parent EmployeeBase_GenderType pointed by [RollCallDefinition].([GenderTypeId]) (FK_RollCallDefinition_GenderType)
        /// </summary>
        public virtual GenderType GenderType { get; set; } // FK_RollCallDefinition_GenderType
        /// <summary>
        /// Child RollCallWorkCities where [RollCallWorkCity].[RollCallDefinitionId] point to this entity (FK_RollCallWorkCity_RollCallDefinition)
        /// </summary>
        public virtual ICollection<RollCallWorkCity> RollCallWorkCities { get; set; } // RollCallWorkCity.FK_RollCallWorkCity_RollCallDefinition

        public RollCallDefinition()
        {
            CompatibleRollCalls_CompatibleRollCallId = new List<CompatibleRollCall>();
            CompatibleRollCalls_RollCallDefinitionId = new List<CompatibleRollCall>();
            DayNightRollCalls = new List<DayNightRollCall>();
            EmployeeAttendAbsenceItems = new List<EmployeeAttendAbsenceItem>();
            EmployeeLongTermAbsences = new List<EmployeeLongTermAbsence>();
            IncludedRollCalls = new List<IncludedRollCall>();
            MonthTimeSheetRollCalls = new List<MonthTimeSheetRollCall>();
            RollCallEmploymentTypes = new List<RollCallEmploymentType>();
            RollCallJobCategories = new List<RollCallJobCategory>();
            RollCallSalaryCodes = new List<RollCallSalaryCode>();
            RollCallWorkTimeDayTypes = new List<RollCallWorkTimeDayType>();
            TimeShiftSettings_TemporaryRollCallDefinitionEndShift = new List<TimeShiftSetting>();
            TimeShiftSettings_TemporaryRollCallDefinitionStartShift = new List<TimeShiftSetting>();
            OnCall_Types = new List<OnCall_Type>();
            TimeShiftSettings_OverTimeRollCallDefinitionEndShift = new List<TimeShiftSetting>();
            TimeShiftSettings_OverTimeRollCallDefinitionStartShift = new List<TimeShiftSetting>();
            ConditionalAbsenceTypes = new List<ConditionalAbsenceType>();
            ConditionalAbsenceSubjectTypes = new List<ConditionalAbsenceSubjectType>();
            RollCallWorkTimeMonthSettings = new List<RollCallWorkTimeMonthSetting>();
            RollCallWorkCities = new List<RollCallWorkCity>();
        }
    }

}
// </auto-generated>
