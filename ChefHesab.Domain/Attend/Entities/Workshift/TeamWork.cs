// <auto-generated>
// ReSharper disable All

using KSC.Domain;
using Ksc.HR.Domain.Entities.Personal;
using Ksc.HR.Domain.Entities.Transfer;
using Ksc.HR.Domain.Entities.WorkFlow;
using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Ksc.HR.Domain.Entities.Chart;
using Ksc.HR.Domain.Entities.Security;
using Ksc.HR.Domain.Entities.Pay;

namespace Ksc.HR.Domain.Entities.Workshift
{
    // TeamWork
    /// <summary>
    /// تیم کاری
    /// </summary>
    public class TeamWork : IEntityBase<int>
    {
        public int Id { get; set; } // Id (Primary key)

        /// <summary>
        /// عنوان
        /// </summary>
        public string Title { get; set; } // Title (length: 500)

        /// <summary>
        /// کد
        /// </summary>
        public string Code { get; set; } // Code (length: 50)
        public int TeamWorkCategoryId { get; set; } // TeamWorkCategoryId
        public int? OverTimeDefinitionId { get; set; } // OverTimeDefinitionId

        /// <summary>
        /// تاریخ شروع اعتبار
        /// </summary>
        public DateTime? ValidityStartDate { get; set; } // ValidityStartDate

        /// <summary>
        /// تاریخ پایان اعتبار
        /// </summary>
        public DateTime? ValidityEndDate { get; set; } // ValidityEndDate

        /// <summary>
        /// یه این تیم کمد تعلق می گیرد؟
        /// </summary>
        public bool? HasCommode { get; set; } // HasCommode
        public DateTime? InsertDate { get; set; } // InsertDate
        public string InsertUser { get; set; } // InsertUser (length: 50)
        public DateTime? UpdateDate { get; set; } // UpdateDate
        public string UpdateUser { get; set; } // UpdateUser (length: 50)
        public string DomainName { get; set; } // DomainName (length: 50)
        public bool IsActive { get; set; } // IsActive
        public byte[] RowVersion { get; set; } // RowVersion (length: 8)

        // Reverse navigation

        /// <summary>
        /// Child Employees where [Employee].[TeamWorkId] point to this entity (FK_Employee_TeamWork)
        /// </summary>
        public virtual ICollection<Employee> Employees { get; set; } // Employee.FK_Employee_TeamWork

        /// <summary>
        /// Child EmployeeTeamWorks where [EmployeeTeamWork].[TeamWorkId] point to this entity (FK_EmployeeTeamWork_TeamWork)
        /// </summary>
        public virtual ICollection<EmployeeTeamWork> EmployeeTeamWorks { get; set; } // EmployeeTeamWork.FK_EmployeeTeamWork_TeamWork

        /// <summary>
        /// Child Transfer_Requests where [Request].[LastTeamWorkId] point to this entity (FK_Request_TeamWork_Last)
        /// </summary>
        public virtual ICollection<Transfer_Request> Transfer_Requests_LastTeamWorkId { get; set; } // Request.FK_Request_TeamWork_Last

        /// <summary>
        /// Child Transfer_Requests where [Request].[RequestdTeamWorkId] point to this entity (FK_Request_TeamWork_Requested)
        /// </summary>
        public virtual ICollection<Transfer_Request> Transfer_Requests_RequestdTeamWorkId { get; set; } // Request.FK_Request_TeamWork_Requested

        /// <summary>
        /// Child WF_Requests where [Request].[RefereToTeamWorkId] point to this entity (FK_Request_TeamWork)
        /// </summary>
        public virtual ICollection<WF_Request> WF_Requests { get; set; } // Request.FK_Request_TeamWork


       
        // Foreign keys

        /// <summary>
        /// Parent OverTimeDefinition pointed by [TeamWork].([OverTimeDefinitionId]) (FK_TeamWork_OverTimeDefinition)
        /// </summary>
        public virtual OverTimeDefinition OverTimeDefinition { get; set; } // FK_TeamWork_OverTimeDefinition

        /// <summary>
        /// Parent TeamWorkCategory pointed by [TeamWork].([TeamWorkCategoryId]) (FK_TeamWork_TeamWorkCategory)
        /// </summary>
        public virtual TeamWorkCategory TeamWorkCategory { get; set; } // FK_TeamWork_TeamWorkCategory
        /// <summary>
        /// Child Chart_JobPositionTeamWorks where [JobPositionTeamWork].[TeamWorkId] point to this entity (FK_JobPositionTeamWork_TeamWork)
        /// </summary>
        public virtual ICollection<Chart_JobPositionTeamWork> Chart_JobPositionTeamWorks { get; set; } // JobPositionTeamWork.FK_JobPositionTeamWork_TeamWork

        /// <summary>
        /// Child Security_UserDefinitionSecurityTeamWorks where [UserDefinitionSecurityTeamWork].[TeamWorkId] point to this entity (FK_UserDefinitionSecurityTeamWork_TeamWork)
        /// </summary>
        public virtual ICollection<UserDefinitionSecurityTeamWork> UserDefinitionSecurityTeamWorks { get; set; } // UserDefinitionSecurityTeamWork.FK_UserDefinitionSecurityTeamWork_TeamWork

        /// <summary>
        /// Child Relocations where [Relocation].[DestinationTeamWorkId] point to this entity (FK_Relocation_TeamWork1)
        /// </summary>
        public virtual ICollection<Relocation> Relocations_DestinationTeamWorkId { get; set; } // Relocation.FK_Relocation_TeamWork1

        /// <summary>
        /// Child Relocations where [Relocation].[SourceTeamWorkId] point to this entity (FK_Relocation_TeamWork)
        /// </summary>
        public virtual ICollection<Relocation> Relocations_SourceTeamWorkId { get; set; } // Relocation.FK_Relocation_TeamWork

        /// <summary>
        /// Child Pay_BudgetRewardEmployees where [BudgetRewardEmployee].[TeamWorkId] point to this entity (FK_BudgetRewardEmployee_TeamWork)
        /// </summary>
        public virtual ICollection<BudgetRewardEmployee> BudgetRewardEmployees { get; set; } // BudgetRewardEmployee.FK_BudgetRewardEmployee_TeamWork

        public TeamWork()
        {
            BudgetRewardEmployees = new List<BudgetRewardEmployee>();
            Employees = new List<Employee>();
            EmployeeTeamWorks = new List<EmployeeTeamWork>();
            Transfer_Requests_LastTeamWorkId = new List<Transfer_Request>();
            WF_Requests = new List<WF_Request>();
            Transfer_Requests_RequestdTeamWorkId = new List<Transfer_Request>();
            UserDefinitionSecurityTeamWorks = new List<UserDefinitionSecurityTeamWork>();
            Chart_JobPositionTeamWorks = new List<Chart_JobPositionTeamWork>();
            Relocations_DestinationTeamWorkId = new List<Relocation>();
            Relocations_SourceTeamWorkId = new List<Relocation>();
        }
    }

}
// </auto-generated>
